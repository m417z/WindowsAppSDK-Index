// Copyright (C) Microsoft Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// These are the WebView2 experimental APIs published publicly as a part of the
// WebView2 prerelease package. Modifications to any published interface require
// a breaking change for the experimental APIs. Otherwise, do not modify
// published interfaces.

// midl is run from a tools directory with no special include paths setup.
// To import an IDL from the build you must get out of the tools path
// first.
// We include the shipping webview2.idl so that our preview APIs may
// interact with our public APIs.
import "../../edge_embedded_browser/client/win/current/webview2.idl";

[uuid(07abc5eb-fae4-4485-bf29-083ac335408b), version(1.0)]
library WebView2Experimental {

// Forward declarations

interface ICoreWebView2Experimental5;
interface ICoreWebView2Experimental6;
interface ICoreWebView2Experimental7;
interface ICoreWebView2Experimental8;
interface ICoreWebView2Experimental9;
interface ICoreWebView2ExperimentalCompositionController3;
interface ICoreWebView2ExperimentalCompositionController4;
interface ICoreWebView2ExperimentalContextMenuItem;
interface ICoreWebView2ExperimentalContextMenuItemCollection;
interface ICoreWebView2ExperimentalContextMenuRequestedEventArgs;
interface ICoreWebView2ExperimentalContextMenuRequestedEventHandler;
interface ICoreWebView2ExperimentalContextMenuTarget;
interface ICoreWebView2ExperimentalControllerOptions;
interface ICoreWebView2ExperimentalCustomItemSelectedEventHandler;
interface ICoreWebView2ExperimentalController2;
interface ICoreWebView2ExperimentalEnvironment3;
interface ICoreWebView2ExperimentalEnvironment4;
interface ICoreWebView2ExperimentalEnvironment5;
interface ICoreWebView2ExperimentalEnvironment6;
interface ICoreWebView2ExperimentalEnvironment7;
interface ICoreWebView2ExperimentalEnvironment8;
interface ICoreWebView2ExperimentalFrame;
interface ICoreWebView2ExperimentalFrameContentLoadingEventHandler;
interface ICoreWebView2ExperimentalFrameDOMContentLoadedEventHandler;
interface ICoreWebView2ExperimentalFrameNavigationCompletedEventHandler;
interface ICoreWebView2ExperimentalFrameNavigationStartingEventHandler;
interface ICoreWebView2ExperimentalPrintToPdfCompletedHandler;
interface ICoreWebView2ExperimentalPrintSettings;
interface ICoreWebView2ExperimentalProfile;
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler;
interface ICoreWebView2ExperimentalUpdateRuntimeResult;
interface ICoreWebView2ExperimentalIsMutedChangedEventHandler;
interface ICoreWebView2ExperimentalIsDocumentPlayingAudioChangedEventHandler;

// Enums and structs

/// Matrix that represents a 3D transform. This transform is used to
/// calculate correct coordinates when calling
/// CreateCoreWebView2PointerInfoFromPointerId. This is equivalent to a
/// D2D1_MATRIX_4X4_F
typedef struct COREWEBVIEW2_MATRIX_4X4 {
  /// The value in the first row and first column of the matrix.
  FLOAT _11;
  /// The value in the first row and second column of the matrix.
  FLOAT _12;
  /// The value in the first row and third column of the matrix.
  FLOAT _13;
  /// The value in the first row and fourth column of the matrix.
  FLOAT _14;
  /// The value in the second row and first column of the matrix.
  FLOAT _21;
  /// The value in the second row and second column of the matrix.
  FLOAT _22;
  /// The value in the second row and third column of the matrix.
  FLOAT _23;
  /// The value in the second row and fourth column of the matrix.
  FLOAT _24;
  /// The value in the third row and first column of the matrix.
  FLOAT _31;
  /// The value in the third row and second column of the matrix.
  FLOAT _32;
  /// The value in the third row and third column of the matrix.
  FLOAT _33;
  /// The value in the third row and fourth column of the matrix.
  FLOAT _34;
  /// The value in the fourth row and first column of the matrix.
  FLOAT _41;
  /// The value in the fourth row and second column of the matrix.
  FLOAT _42;
  /// The value in the fourth row and third column of the matrix.
  FLOAT _43;
  /// The value in the fourth row and fourth column of the matrix.
  FLOAT _44;
} COREWEBVIEW2_MATRIX_4X4;

/// Status of UpdateRuntime operation result.
[v1_enum]
typedef enum COREWEBVIEW2_UPDATE_RUNTIME_STATUS {
  /// Latest version of Edge WebView2 Runtime is installed.
  /// No update for Edge WebView2 Runtime is available, or Edge WebView2
  /// Runtime is updated successfully and latest version is now installed.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_LATEST_VERSION_INSTALLED,

  /// Edge WebView2 Runtime update is already running, which could be
  /// triggered by auto update or by other UpdateRuntime request from some app.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING,

  /// Edge WebView2 Runtime update is blocked by group policy.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY,

  /// Edge WebView2 Runtime update failed.
  /// See `ExtendedError` property of UpdateRuntimeResult for more
  /// information about the failure.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED,
} COREWEBVIEW2_UPDATE_RUNTIME_STATUS;

// PDF toolbar item. This enum must be in sync with ToolBarItem in pdf-store.ts
/// Specifies the PDF toolbar item types used for the `ICoreWebView2ExperimentalSettings::put_HiddenPdfToolbarItems` method.
[v1_enum]
typedef enum COREWEBVIEW2_PDF_TOOLBAR_ITEMS {

  /// No item
  COREWEBVIEW2_PDF_TOOLBAR_ITEMS_NONE  = 0x0,

  /// The save button
  COREWEBVIEW2_PDF_TOOLBAR_ITEMS_SAVE  = 0x0001,

  /// The print button
  COREWEBVIEW2_PDF_TOOLBAR_ITEMS_PRINT  = 0x0002,

  /// The save as button
  COREWEBVIEW2_PDF_TOOLBAR_ITEMS_SAVE_AS  = 0x0004,

} COREWEBVIEW2_PDF_TOOLBAR_ITEMS;
cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(COREWEBVIEW2_PDF_TOOLBAR_ITEMS);")

/// Specifies memory usage target level of WebView.
[v1_enum]
typedef enum COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL {
  /// Specifies normal memory usage target level.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL,

  /// Specifies low memory usage target level.
  /// Used for inactivate WebView for reduced memory consumption.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW,

} COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL;

/// Indicates the kind of context for which the context menu was created
/// for the `ICoreWebView2ContextMenuTarget::get_Kind` method.
/// This enum will always represent the active element that caused the context menu request.
/// If there is a selection with multiple images, audio and text, for example, the element that
/// the end user right clicks on within this selection will be the option represented by this enum.
[v1_enum]
typedef enum COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND
{
    /// Indicates that the context menu was created for the page without any additional content.
    COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_PAGE,

    /// Indicates that the context menu was created for an image element.
    COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_IMAGE,

    /// Indicates that the context menu was created for selected text.
    COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_SELECTED_TEXT,

    /// Indicates that the context menu was created for an audio element.
    COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_AUDIO,

    /// Indicates that the context menu was created for a video element.
    COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND_VIDEO,
} COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND;

/// Specifies the menu item kind
/// for the `ICoreWebView2ExperimentalContextMenuItem::get_Kind` method
[v1_enum]
typedef enum COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND
{
    /// Specifies a command menu item kind.
    COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_COMMAND,

    /// Specifies a check box menu item kind. `ContextMenuItem` objects of this kind
    /// will need the `IsChecked` property to determine current state of the check box.
    COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_CHECK_BOX,

    /// Specifies a radio button menu item kind. `ContextMenuItem` objects of this kind
    /// will need the `IsChecked` property to determine current state of the radio button.
    COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_RADIO,

    /// Specifies a separator menu item kind. `ContextMenuItem` objects of this kind
    /// are used to signal a visual separator with no functionality.
    COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_SEPARATOR,

    /// Specifies a submenu menu item kind. `ContextMenuItem` objects of this kind will contain
    /// a `ContextMenuItemCollection` of its children `ContextMenuItem` objects.
    COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND_SUBMENU,
} COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND;

/// The orientation for printing, used by the `Orientation` property on
/// `ICoreWebView2ExperimentalPrintSettings`. Currently only printing to PDF
/// is supported.
[v1_enum]
typedef enum COREWEBVIEW2_PRINT_ORIENTATION
{
  /// Print the page(s) in portrait orientation.
  COREWEBVIEW2_PRINT_ORIENTATION_PORTRAIT,

  /// Print the page(s) in landscape orientation.
  COREWEBVIEW2_PRINT_ORIENTATION_LANDSCAPE,
} COREWEBVIEW2_PRINT_ORIENTATION;

// End of enums and structs
/// This interface is an extension of `ICoreWebView2` that manages memory usage target level.
[uuid(E05E04CA-7924-4C04-A84C-A90572DBA22A), object, pointer_default(unique)]
interface ICoreWebView2Experimental5 : IUnknown {

  /// `MemoryUsageTargetLevel` indicates desired memory consumption level of
  /// WebView.
  [propget] HRESULT MemoryUsageTargetLevel(
      [out, retval] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL* level);

  /// An app may set `MemoryUsageTargetLevel` to indicate desired memory
  /// consumption level of WebView. Scripts will not be impacted and continue
  /// to run. This is useful for inactive apps that still want to run scripts
  /// and/or keep network connections alive and therefore could not call
  /// `TrySuspend` and `Resume` to reduce memory consumption. These apps can
  /// set memory usage target level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// when the app becomes inactive, and set back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active. It is not necessary to set CoreWebView2Controller's IsVisible
  /// property to false when setting the property.
  /// It is a best effort operation to change memory usage level, and the
  /// API will return before the operation completes.
  /// Setting the level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// could potentially cause memory for some WebView browser processes to be
  /// swapped out to disk in some circumstances.
  /// It is a best effort to reduce memory usage as much as possible. If a script
  /// runs after its related memory has been swapped out, the memory will be swapped
  /// back in to ensure the script can still run, but performance might be impacted.
  /// Therefore, the app should set the level back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active again. Setting memory usage target level back to normal will not happen
  /// automatically.
  /// An app should choose to use either the combination of `TrySuspend` and `Resume`
  /// or the combination of setting MemoryUsageTargetLevel to low and normal. It is
  /// not advisable to mix them.
  /// Trying to set `MemoryUsageTargetLevel` while suspended will be ignored.
  /// The `TrySuspend` and `Resume` methods will change the `MemoryUsageTargetLevel`.
  /// `TrySuspend` will automatically set `MemoryUsageTargetLevel` to low while
  /// `Resume` on suspended WebView will automatically set `MemoryUsageTargetLevel`
  /// to normal. Calling `Resume` when the WebView is not suspended would not change
  /// `MemoryUsageTargetLevel`.
  ///
  /// \snippet ViewComponent.cpp MemoryUsageTargetLevel
  [propput] HRESULT MemoryUsageTargetLevel(
      [in] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL level);

}

/// This interface is an extension of `ICoreWebView2` related to CoreWebView2 ContextMenu event.
[uuid(5da51469-dcfb-435e-8abe-e716312c577e), object, pointer_default(unique)]
interface ICoreWebView2Experimental6 : IUnknown
{
    /// Add an event handler for the `ContextMenuRequested` event.
    /// `ContextMenuRequested` event is raised when a context menu is requested by the user
    /// and the content inside WebView hasn't disabled context menus.
    /// The host has the option to create their own context menu with the information provided in
    /// the event or can add items to or remove items from WebView context menu.
    /// If the host doesn't handle the event, WebView will display the default context menu.
    ///
    /// \snippet SettingsComponent.cpp EnableCustomMenu
    HRESULT add_ContextMenuRequested(
        [in] ICoreWebView2ExperimentalContextMenuRequestedEventHandler* eventHandler,
        [out] EventRegistrationToken* token);

    /// Remove an event handler previously added with `add_ContextMenuRequested`.
    HRESULT remove_ContextMenuRequested(
        [in] EventRegistrationToken token);
}

/// This interface is an extension of the ICoreWebView2. An object
/// implementing the ICoreWebView2Experimental7 interface will also
/// implement ICoreWebView2.
[uuid(72a78e99-c92e-4616-8130-d57407ec5341), object, pointer_default(unique)]
interface ICoreWebView2Experimental7 : IUnknown {
  /// Print the current page to PDF asynchronously with the provided settings. See
  /// `ICoreWebView2ExperimentalPrintSettings` for description of settings. Passing
  /// nullptr for `printSettings` results in default print settings used.
  ///
  /// Use `resultFilePath` to specify the path to the PDF file. The host should
  /// provide an absolute path, including file name. If the path
  /// points to an existing file, the file will be overwritten. If the path is
  /// not valid, the method fails with `E_INVALIDARG`.
  ///
  /// The async `PrintToPdf` operation completes when the data has been written
  /// to the PDF file. At this time the
  /// `ICoreWebView2ExperimentalPrintToPdfCompletedHandler` is invoked. If the
  /// application exits before printing is complete, the file is not saved.
  /// Only one `PrintToPdf` operation can be in progress at a time. If
  /// `PrintToPdf` is called while a print to PDF job is in progress, the
  /// completed handler is immediately invoked with `isSuccessful` set to FALSE.
  ///
  /// \snippet FileComponent.cpp PrintToPdf
  HRESULT PrintToPdf(
    [in] LPCWSTR resultFilePath,
    [in] ICoreWebView2ExperimentalPrintSettings* printSettings,
    [in] ICoreWebView2ExperimentalPrintToPdfCompletedHandler* handler);
}

/// This interface is an extension of `ICoreWebView2`.
[uuid(F80EDFF2-EF0A-4B35-919B-AA9863E732AA), object, pointer_default(unique)]
interface ICoreWebView2Experimental9 : IUnknown {
  /// Adds an event handler for the `IsMutedChanged` event.
  /// `IsMutedChanged` is raised when the IsMuted property changes value.
  ///
  /// \snippet AudioComponent.cpp IsMutedChanged
  HRESULT add_IsMutedChanged(
      [in] ICoreWebView2ExperimentalIsMutedChangedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_IsMutedChanged`.
  HRESULT remove_IsMutedChanged(
      [in] EventRegistrationToken token);

  /// Indicates whether all audio output from this CoreWebView2 is muted or not.
  ///
  /// \snippet AudioComponent.cpp ToggleIsMuted
  [propget] HRESULT IsMuted([out, retval] BOOL* value);

  /// Sets the `IsMuted` property.
  ///
  /// \snippet AudioComponent.cpp ToggleIsMuted
  [propput] HRESULT IsMuted([in] BOOL value);

  /// Adds an event handler for the `IsDocumentPlayingAudioChanged` event.
  /// `IsDocumentPlayingAudioChanged` is raised when the IsDocumentPlayingAudio property changes value.
  ///
  /// \snippet AudioComponent.cpp IsDocumentPlayingAudioChanged
  HRESULT add_IsDocumentPlayingAudioChanged(
      [in] ICoreWebView2ExperimentalIsDocumentPlayingAudioChangedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_IsDocumentPlayingAudioChanged`.
  HRESULT remove_IsDocumentPlayingAudioChanged(
      [in] EventRegistrationToken token);

  /// Indicates whether any audio output from this CoreWebView2 is playing.
  /// This property will be true if audio is playing even if IsMuted is true.
  ///
  /// \snippet AudioComponent.cpp IsDocumentPlayingAudio
  [propget] HRESULT IsDocumentPlayingAudio([out, retval] BOOL* value);
}

/// Receives the result of the `PrintToPdf` method. If the print to PDF
/// operation succeeds, `isSuccessful` is true. Otherwise, if the operation
/// failed, `isSuccessful` is set to false. An invalid path returns
/// `E_INVALIDARG`.
[uuid(ccf1ef04-fd8e-4d5f-b2de-0983e41b8c36), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalPrintToPdfCompletedHandler : IUnknown {

  /// Provides the result of the corresponding asynchronous method.
  HRESULT Invoke([in] HRESULT errorCode, BOOL isSuccessful);
}

/// Settings used by the `PrintToPdf` method. Other programmatic printing is not
/// currently supported.
[uuid(377f3721-c74e-48ca-8db1-df68e51d60e2), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalPrintSettings : IUnknown {

  /// The orientation can be portrait or landscape. The default orientation is
  /// portrait. See `COREWEBVIEW2_PRINT_ORIENTATION`.
  [propget] HRESULT Orientation(
    [out, retval] COREWEBVIEW2_PRINT_ORIENTATION* orientation);

  /// Sets the `Orientation` property.
  [propput] HRESULT Orientation(
      [in] COREWEBVIEW2_PRINT_ORIENTATION orientation);

  /// The scale factor is a value between 0.1 and 2.0. The default is 1.0.
  [propget] HRESULT ScaleFactor([out, retval] double* scaleFactor);

  /// Sets the `ScaleFactor` property. Returns `E_INVALIDARG` if an invalid
  /// value is provided, and the current value is not changed.
  [propput] HRESULT ScaleFactor([in] double scaleFactor);

  /// The page width in inches. The default width is 8.5 inches.
  [propget] HRESULT PageWidth([out, retval] double* pageWidth);

  /// Sets the `PageWidth` property. Returns `E_INVALIDARG` if the page width is
  /// less than or equal to zero, and the current value is not changed.
  [propput] HRESULT PageWidth([in] double pageWidth);

  /// The page height in inches. The default height is 11 inches.
  [propget] HRESULT PageHeight([out, retval] double* pageHeight);

  /// Sets the `PageHeight` property. Returns `E_INVALIARG` if the page height
  /// is less than or equal to zero, and the current value is not changed.
  [propput] HRESULT PageHeight([in] double pageHeight);

  /// The top margin in inches. The default is 1 cm, or ~0.4 inches.
  [propget] HRESULT MarginTop([out, retval] double* marginTop);

  /// Sets the `MarginTop` property. A margin cannot be less than zero.
  /// Returns `E_INVALIDARG` if an invalid value is provided, and the current
  /// value is not changed.
  [propput] HRESULT MarginTop([in] double marginTop);

  /// The bottom margin in inches. The default is 1 cm, or ~0.4 inches.
  [propget] HRESULT MarginBottom([out, retval] double* marginBottom);

  /// Sets the `MarginBottom` property. A margin cannot be less than zero.
  /// Returns `E_INVALIDARG` if an invalid value is provided, and the current
  /// value is not changed.
  [propput] HRESULT MarginBottom([in] double marginBottom);

  /// The left margin in inches. The default is 1 cm, or ~0.4 inches.
  [propget] HRESULT MarginLeft([out, retval] double* marginLeft);

  /// Sets the `MarginLeft` property. A margin cannot be less than zero.
  /// Returns `E_INVALIDARG` if an invalid value is provided, and the current
  /// value is not changed.
  [propput] HRESULT MarginLeft([in] double marginLeft);

  /// The right margin in inches. The default is 1 cm, or ~0.4 inches.
  [propget] HRESULT MarginRight([out, retval] double* marginRight);

  /// Set the `MarginRight` property.A margin cannot be less than zero.
  /// Returns `E_INVALIDARG` if an invalid value is provided, and the current
  /// value is not changed.
  [propput] HRESULT MarginRight([in] double marginRight);

  /// `TRUE` if background colors and images should be printed. The default value
  /// is `FALSE`.
  [propget] HRESULT ShouldPrintBackgrounds(
      [out, retval] BOOL* shouldPrintBackgrounds);

  /// Set the `ShouldPrintBackgrounds` property.
  [propput] HRESULT ShouldPrintBackgrounds([in] BOOL shouldPrintBackgrounds);

  /// `TRUE` if only the current end user's selection of HTML in the document
  /// should be printed. The default value is `FALSE`.
  [propget] HRESULT ShouldPrintSelectionOnly(
      [out, retval] BOOL* shouldPrintSelectionOnly);

  /// Set the `ShouldPrintSelectionOnly` property.
  [propput] HRESULT ShouldPrintSelectionOnly(
      [in] BOOL shouldPrintSelectionOnly);

  /// `TRUE` if header and footer should be printed. The default value is `FALSE`.
  /// The header consists of the date and time of printing, and the title of the
  /// page. The footer consists of the URI and page number. The height of the
  /// header and footer is 0.5 cm, or ~0.2 inches.
  [propget] HRESULT ShouldPrintHeaderAndFooter(
      [out, retval] BOOL* shouldPrintHeaderAndFooter);

  /// Set the `ShouldPrintHeaderAndFooter` property.
  [propput] HRESULT ShouldPrintHeaderAndFooter(
      [in] BOOL shouldPrintHeaderAndFooter);

  /// The title in the header if `ShouldPrintHeaderAndFooter` is `TRUE`. The
  /// default value is the title of the current document.
  [propget] HRESULT HeaderTitle([out, retval] LPWSTR* headerTitle);

  /// Set the `HeaderTitle` property. If an empty string or null value is
  /// provided, no title is shown in the header.
  [propput] HRESULT HeaderTitle([in] LPCWSTR headerTitle);

  /// The URI in the footer if `ShouldPrintHeaderAndFooter` is `TRUE`. The
  /// default value is the current URI.
  [propget] HRESULT FooterUri([out, retval] LPWSTR* footerUri);

  /// Set the `FooterUri` property. If an empty string or null value is
  /// provided, no URI is shown in the footer.
  [propput] HRESULT FooterUri([in] LPCWSTR footerUri);
}

/// The UpdateRuntime operation result.
[uuid(DD503E49-AB19-47C0-B2AD-6DDD09CC3E3A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeResult : IUnknown {

  /// The status for the UpdateRuntime operation.
  [propget] HRESULT Status(
      [out, retval] COREWEBVIEW2_UPDATE_RUNTIME_STATUS* status);

  /// The update error happened while trying to update Edge WebView2 Runtime.
  /// ExtendedError will be S_OK if Status is not `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED`
  /// or `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY`.
  [propget] HRESULT ExtendedError([out, retval] HRESULT* error);
}

/// Represents a context menu item of a context menu displayed by WebView.
[uuid(7aed49e3-a93f-497a-811c-749c6b6b6c65), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalContextMenuItem : IUnknown
{
  /// Gets the unlocalized name for the `ContextMenuItem`. Use this to
  /// distinguish between context menu item types. This will be the English
  /// label of the menu item in lower camel case. For example, the "Save as"
  /// menu item will be "saveAs". Extension menu items will be "extension",
  /// custom menu items will be "custom" and spellcheck items will be
  /// "spellCheck".
  /// Some example context menu item names are:
  /// - "saveAs"
  /// - "copyImage"
  /// - "openLinkInNewWindow"
  /// - "cut"
  /// - "copy"
  /// - "paste"
  [propget] HRESULT Name([out, retval] LPWSTR* value);

  /// Gets the localized label for the `ContextMenuItem`. Will contain an
  /// ampersand for characters to be used as keyboard accelerator.
  [propget] HRESULT Label([out, retval] LPWSTR* value);

  /// Gets the Command ID for the `ContextMenuItem`. Use this to report the
  /// `SelectedCommandId` in `ContextMenuRequested` event.
  [propget] HRESULT CommandId([out, retval] INT32* value);

  /// Gets the localized keyboard shortcut for this ContextMenuItem. It will be
  /// the empty string if there is no keyboard shortcut. This is text intended
  /// to be displayed to the end user to show the keyboard shortcut. For example
  /// this property is Ctrl+Shift+I for the "Inspect" `ContextMenuItem`.
  [propget] HRESULT ShortcutKeyDescription([out, retval] LPWSTR* value);

  /// Gets the Icon for the `ContextMenuItem` in PNG, Bitmap or SVG formats in the form of an IStream.
  /// Stream will be rewound to the start of the image data.
  [propget] HRESULT Icon([out, retval] IStream** value);

  /// Gets the `ContextMenuItem` kind.
  [propget] HRESULT Kind([out, retval] COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND* value);

  /// Sets the enabled property of the `ContextMenuItem`. Must only be used in the case of a
  /// custom context menu item. The default value for this is `TRUE`.
  [propput] HRESULT IsEnabled([in] BOOL value);

  /// Gets the enabled property of the `ContextMenuItem`.
  [propget] HRESULT IsEnabled([out, retval] BOOL* value);

  /// Sets the checked property of the `ContextMenuItem`. Must only be used for custom context
  /// menu items that are of kind Check box or Radio.
  [propput] HRESULT IsChecked([in] BOOL value);

  /// Gets the checked property of the `ContextMenuItem`, used if the kind is Check box or Radio.
  [propget] HRESULT IsChecked([out, retval] BOOL* value);

  /// Gets the list of children menu items through a `ContextMenuItemCollection`
  /// if the kind is Submenu. If the kind is not submenu, will return null.
  [propget] HRESULT Children([out, retval] ICoreWebView2ExperimentalContextMenuItemCollection** value);

  /// Add an event handler for the `CustomItemSelected` event.
  /// `CustomItemSelected` event is raised when the user selects this `ContextMenuItem`.
  /// Will only be raised for end developer created context menu items
  HRESULT add_CustomItemSelected(
      [in] ICoreWebView2ExperimentalCustomItemSelectedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_CustomItemSelected`.
  HRESULT remove_CustomItemSelected(
      [in] EventRegistrationToken token);
}

/// Represents a collection of `ContextMenuItem` objects. Used to get, remove and add
/// `ContextMenuItem` objects at the specified index.
[uuid(f562a2f5-c415-45cf-b909-d4b7c1e276d3), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalContextMenuItemCollection : IUnknown
{
  /// Gets the number of `ContextMenuItem` objects contained in the `ContextMenuItemCollection`.
  [propget] HRESULT Count([out, retval] UINT32* value);

  /// Gets the `ContextMenuItem` at the specified index.
  HRESULT GetValueAtIndex([in] UINT32 index,
      [out, retval] ICoreWebView2ExperimentalContextMenuItem** value);

  /// Removes the `ContextMenuItem` at the specified index.
  HRESULT RemoveValueAtIndex([in] UINT32 index);

  /// Inserts the `ContextMenuItem` at the specified index.
  HRESULT InsertValueAtIndex(
      [in] UINT32 index,
        [in] ICoreWebView2ExperimentalContextMenuItem* value);
}

/// Receives `ContextMenuRequested` events.
[uuid(04d3fe1d-ab87-42fb-a898-da241d35b63c), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalContextMenuRequestedEventHandler : IUnknown
{
  /// Called to provide the event args when a context menu is requested on a
  /// WebView element.
  HRESULT Invoke(
      [in] ICoreWebView2* sender,
      [in] ICoreWebView2ExperimentalContextMenuRequestedEventArgs* args);
}

/// Raised to notify the host that the end user selected a custom
/// `ContextMenuItem`. `CustomItemSelected` event is raised on the specific
/// `ContextMenuItem` that the end user selected.
[uuid(49e1d0bc-fe9e-4481-b7c2-32324aa21998), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCustomItemSelectedEventHandler : IUnknown
{
  /// Provides the event args for the corresponding event. No event args exist
  /// and the `args` parameter is set to `null`.
  HRESULT Invoke(
      [in] ICoreWebView2ExperimentalContextMenuItem* sender, [in] IUnknown* args);
}

/// Event args for the `ContextMenuRequested` event. Will contain the selection information
/// and a collection of all of the default context menu items that the WebView
/// would show. Allows the app to draw its own context menu or add/remove
/// from the default context menu.
[uuid(a1d309ee-c03f-11eb-8529-0242ac130003), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalContextMenuRequestedEventArgs : IUnknown
{
  /// Gets the collection of `ContextMenuItem` objects.
  /// See `ICoreWebView2ContextMenuItemCollection` for more details.
  [propget] HRESULT MenuItems([out, retval] ICoreWebView2ExperimentalContextMenuItemCollection** value);

  /// Gets the target information associated with the requested context menu.
  /// See `ICoreWebView2ContextMenuTarget` for more details.
  [propget] HRESULT ContextMenuTarget([out, retval] ICoreWebView2ExperimentalContextMenuTarget** value);

  /// Gets the coordinates where the context menu request occured in relation to the upper
  /// left corner of the WebView bounds.
  [propget] HRESULT Location([out, retval] POINT* value);

  /// Sets the selected command for the WebView to execute. The value is
  /// obtained via the `ContextMenuItem` CommandId property.
  /// This value should always be from context menu items for the relevant context menu and
  /// event arg. Attempting to mix will result in invalid outputs.
  /// The default value is -1 which means that no selected occured.
  [propput] HRESULT SelectedCommandId([in] INT32 value);

  /// Gets the selected CommandId.
  [propget] HRESULT SelectedCommandId([out, retval] INT32* value);

  /// Sets whether the `ContextMenuRequested` event is handled by host after
  /// the event handler completes or if there is a deferral then after the deferral is completed.
  /// If `Handled` is set to TRUE then WebView will not display a context menu and will instead
  /// use the `SelectedCommandId` property to indicate which, if any, context menu item to invoke.
  /// If after the event handler or deferral completes `Handled` is set to FALSE then WebView
  /// will display a context menu based on the contents of the `MenuItems` property.
  /// The default value is FALSE.
  [propput] HRESULT Handled([in] BOOL value);

  /// Gets whether the `ContextMenuRequested` event is handled by host.
  [propget] HRESULT Handled([out, retval] BOOL* value);

  /// Returns an `ICoreWebView2Deferral` object. Use this operation to
  /// complete the event when the custom context menu is closed.
  HRESULT GetDeferral([out, retval] ICoreWebView2Deferral** deferral);
}

/// Represents the information regarding the context menu target.
/// Includes the context selected and the appropriate data used for the actions of a context menu.
[uuid(b8611d99-eed6-4f3f-902c-a198502ad472), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalContextMenuTarget : IUnknown
{
    /// Gets the kind of context that the user selected.
    [propget] HRESULT Kind([out, retval] COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND* value);

    /// Returns TRUE if the context menu is requested on an editable component.
    [propget] HRESULT IsEditable([out, retval] BOOL* value);

    /// Returns TRUE if the context menu was requested on the main frame and
    /// FALSE if invoked on another frame.
    [propget] HRESULT IsRequestedForMainFrame([out, retval] BOOL* value);

    /// Gets the uri of the page.
    [propget] HRESULT PageUri([out, retval] LPWSTR* value);

    /// Gets the uri of the frame. Will match the PageUri if `IsRequestedForMainFrame` is TRUE.
    [propget] HRESULT FrameUri([out, retval] LPWSTR* value);

    /// Returns TRUE if the context menu is requested on HTML containing an anchor tag.
    [propget] HRESULT HasLinkUri([out, retval] BOOL* value);

    /// Gets the uri of the link (if `HasLinkUri` is TRUE, null otherwise).
    [propget] HRESULT LinkUri([out, retval] LPWSTR* value);

    /// Returns TRUE if the context menu is requested on text element that contains an anchor tag.
    [propget] HRESULT HasLinkText([out, retval] BOOL* value);

    /// Gets the text of the link (if `HasLinkText` is TRUE, null otherwise).
    [propget] HRESULT LinkText([out, retval] LPWSTR * value);

    /// Returns TRUE if the context menu is requested on HTML containing a source uri.
    [propget] HRESULT HasSourceUri([out, retval] BOOL* value);

    /// Gets the active source uri of element (if `HasSourceUri` is TRUE, null otherwise).
    [propget] HRESULT SourceUri([out, retval] LPWSTR* value);

    /// Returns TRUE if the context menu is requested on a selection.
    [propget] HRESULT HasSelection([out, retval] BOOL* value);

    /// Gets the selected text (if `HasSelection` is TRUE, null otherwise).
    [propget] HRESULT SelectionText([out, retval] LPWSTR* value);
}

/// The caller implements this interface to receive the UpdateRuntime result.
[uuid(F1D2D722-3721-499C-87F5-4C405260697A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler : IUnknown {

  /// Provides the result for the UpdateRuntime operation.
  /// `errorCode` will be S_OK if the update operation can be performed
  /// normally, regardless of whether we could update the Edge WebView2
  /// Runtime. If an unexpected error interrupts the update operation, error
  /// code of that unexpected error would be set as `errorCode`.
  /// When update operation can be performed normally, but update resulted in
  /// failure, like download failed, the error code would be presented as
  /// `ExtendedError` property of ICoreWebView2ExperimentalUpdateRuntimeResult.
  HRESULT Invoke([in] HRESULT errorCode,
                 [in] ICoreWebView2ExperimentalUpdateRuntimeResult* result);
}

/// This interface is an extension of the ICoreWebView2Environment that manages
/// updating Edge WebView2 Runtime. An object implementing the
/// ICoreWebView2ExperimentalEnvironment3 interface will also implement
/// ICoreWebView2Environment.
[uuid(9A2BE885-7F0B-4B26-B6DD-C969BAA00BF1), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment3 : IUnknown {
  /// Try to update the installed Microsoft Edge WebView2 Runtime.
  /// This will potentially result in a new version of the Edge WebView2
  /// Runtime being installed and `NewBrowserVersionAvailable` event being raised.
  /// There is no guarantee on the order of that event being raised and
  /// UpdateRuntime's completed handler being invoked. Besides the
  /// `NewBrowserVersionAvailable` event, there will be no impact to any
  /// currently running WebView2s when the update is installed.
  /// Even though the Edge WebView2 Runtime update is installed for the machine
  /// and available to all users, the update will happen silently and not show
  /// elevation prompt.
  /// This will not impact Edge browser installations.
  /// The latest version can always be queried using the
  /// `GetAvailableCoreWebView2BrowserVersionString` API.
  /// The UpdateRuntime method is only supported for an installed Edge WebView2
  /// Runtime. When running a fixed version Edge WebView2 Runtime or non stable
  /// channel Edge browser, this API will return `HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)`.
  /// There could only be one active UpdateRuntime operation in an app process,
  /// and calling this API before the completed handler for a previous call is invoked
  /// will fail with `HRESULT_FROM_WIN32(ERROR_BUSY)`.
  /// Calling this API repeatedly in a short period of time, will also fail with
  /// `HRESULT_FROM_WIN32(ERROR_BUSY)`. To protect accidental abuse of the update
  /// service, the implementation throttles the calls of this API to 3 times within
  /// 5 minutes in a process. The exact throttling limit can change in the future.
  /// Edge update service can only support one update request at a time globally.
  /// If there is already an update operation running in the Edge update service,
  /// UpdateRuntime request will result in the completed handler being invoked with a
  /// result that has `Status` of `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING`.
  /// As the running update could succeed or fail, the app should retry later if
  /// `NewBrowserVersionAvailable` event has not been raised.
  /// The UpdateRuntime operation is associated with the CoreWebView2Environment
  /// object and any ongoing UpdateRuntime operation will be aborted when the
  /// associated CoreWebView2Environment along with the CoreWebView2 objects that
  /// are created by the CoreWebView2Environment object are all released. In this
  /// case, the completed handler will be invoked with `S_OK` as `errorCode` and a
  /// result object with `Status` of COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED and
  /// `ExtendedError` as `E_ABORT`.
  ///
  /// \snippet AppWindow.cpp UpdateRuntime
  HRESULT UpdateRuntime(
      [in] ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler* handler);
}

/// This interface is an extension of the ICoreWebView2Environment. An object
/// implementing the ICoreWebView2ExperimentalEnvironment5 interface will also
/// implement ICoreWebView2Environment.
[uuid(083CB0D7-E464-4108-807E-80AE4EAA3B28), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment5 : IUnknown {
  /// Returns the user data folder that all CoreWebView2's created from this
  /// environment are using.
  /// This could be either the value passed in by the developer when creating the
  /// environment object or the calculated one for default handling.  And will
  /// always be an absolute path.
  ///
  /// \snippet AppWindow.cpp GetUserDataFolder

  [propget] HRESULT UserDataFolder([out, retval] LPWSTR* value);
}

/// A continuation of the ICoreWebView2ExperimentalEnvironment interface for
/// creating CoreWebView2 ContextMenuItem objects.
[uuid(04d4fe1d-ab87-42fb-a898-da241d35b63c), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment6 : IUnknown
{
    /// Create a `ContextMenuItem` object to insert into the WebView context menu.
    /// CoreWebView2 will rewind the icon stream before decoding. Command ID for new
    /// custom menu items will be unique for the lifespan of the ContextMenuRequested
    /// event. There is a limit of 1000 context menu items that can be created per Environment. The specific
    /// command ID values may change from build to build so do not rely on the actual value, but instead use
    /// the value given from the object `get_CommandId` instead.
    /// The returned `ContextMenuItem` object's `IsEnabled` property will default to `TRUE`
    /// and `IsChecked` property will default to `FALSE`.
    HRESULT CreateContextMenuItem(
        [in] LPCWSTR label,
        [in] IStream* iconStream,
        [in] COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND kind,
        [out, retval] ICoreWebView2ExperimentalContextMenuItem** item);
}

/// This interface is an extension of the ICoreWebView2Environment. An object
/// implementing the ICoreWebView2ExperimentalEnvironment7 interface will also
/// implement ICoreWebView2Environment.
[uuid(a584be6b-141f-48aa-a2af-88da1c98950c), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment7 : IUnknown
{
    /// Creates the `ICoreWebView2ExperimentalPrintSettings` used by the
    /// `PrintToPdf` method.
    HRESULT CreatePrintSettings(
        [out, retval] ICoreWebView2ExperimentalPrintSettings** printSettings);
}

/// This interface is an extension of the ICoreWebView2CompositionController.
/// An object implementing ICoreWebView2ExperimentalCompositionController4
/// interface will also implement ICoreWebView2CompositionController.
[uuid(e6041d7f-18ac-4654-a04e-8b3f81251c33), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController4 : IUnknown {
  /// Returns the UI Automation Provider for the WebView.
  [propget] HRESULT UIAProvider([out, retval] IUnknown** provider);

  /// A helper function to convert a pointerId received from the system into
  /// an ICoreWebView2ExperimentalPointerInfo.
  /// parentWindow is the HWND that contains the WebView. This can be any HWND
  /// in the hwnd tree that contains the WebView.
  /// The COREWEBVIEW2_MATRIX_4X4 is the transform from that HWND to the WebView.
  /// The returned ICoreWebView2ExperimentalPointerInfo is used in SendPointerInfo.
  /// The pointer type must be either pen or touch or the function will fail.
  HRESULT CreateCoreWebView2PointerInfoFromPointerId(
      [in] UINT pointerId,
      [in] HWND parentWindow,
      [in] struct COREWEBVIEW2_MATRIX_4X4 transform,
      [out, retval] ICoreWebView2PointerInfo** pointerInfo);
}

/// This interface is continuation of the
/// ICoreWebView2CompositionController interface to manage drag and
/// drop.
[uuid(b134916b-a104-4d2a-9567-c2fd53714350), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController3 : IUnknown {
  /// This function corresponds to \[IDropTarget::DragEnter\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragenter\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragEnter calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragEnter\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragenter\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragenter\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragenter "IDropTarget::DragEnter (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragenter\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragenter "IDropTargetHelper::DragEnter (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragEnter
  HRESULT DragEnter(
      [in] IDataObject* dataObject,
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);

  /// This function corresponds to \[IDropTarget::DragLeave\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragleave\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragLeave calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragLeave\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragleave\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragleave\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragleave "IDropTarget::DragLeave (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragleave\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragleave "IDropTargetHelper::DragLeave (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragLeave
  HRESULT DragLeave();

  /// This function corresponds to \[IDropTarget::DragOver\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragover\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragOver calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragOver\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragover\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragover\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragover "IDropTarget::DragOver (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragover\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragover "IDropTargetHelper::DragOver (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragOver
  HRESULT DragOver(
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);

  /// This function corresponds to \[IDropTarget::Drop\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDrop\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward Drop calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::Drop\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDrop\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDrop\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-drop "IDropTarget::Drop (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDrop\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-drop "IDropTargetHelper::Drop (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp Drop
  HRESULT Drop(
      [in] IDataObject* dataObject,
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);
}

/// This is an extension of the ICoreWebView2Settings Experimental interface for HiddenPdfToolbarItems.
[uuid(d98de66d-46d7-4090-91e1-edf8e66fdb7b), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalSettings6 : IUnknown {
  /// `HiddenPdfToolbarItems` is used to customize the PDF toolbar items. By default, it is COREWEBVIEW2_PDF_TOOLBAR_ITEMS_NONE and so it displays all of the items.
  /// Changes to this property apply to all CoreWebView2s in the same environment and using the same profile.
  /// Changes to this setting apply only after the next navigation.
  /// \snippet SettingsComponent.cpp ToggleHidePdfToolbarItems

  [propget] HRESULT HiddenPdfToolbarItems([out, retval] COREWEBVIEW2_PDF_TOOLBAR_ITEMS* hidden_pdf_toolbar_items);

  /// Set the `HiddenPdfToolbarItems` property.
  [propput] HRESULT HiddenPdfToolbarItems([in] COREWEBVIEW2_PDF_TOOLBAR_ITEMS hidden_pdf_toolbar_items);
}

/// This is the ICoreWebView2Frame Experimental interface.
[uuid(423ba05f-55dd-4c50-8339-22afd009ed31), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrame : IUnknown {
  /// Add an event handler for the `NavigationStarting` event.
  /// A frame navigation will raise a `NavigationStarting` event and
  /// a `CoreWebView2.FrameNavigationStarting` event. All of the
  /// `FrameNavigationStarting` event handlers for the current frame will be
  /// run before the `NavigationStarting` event handlers. All of the event handlers
  /// share a common `NavigationStartingEventArgs` object. Whichever event handler is
  /// last to change the `NavigationStartingEventArgs.Cancel` property will
  /// decide if the frame navigation will be cancelled. Redirects raise this
  /// event as well, and the navigation id is the same as the original one.
  ///
  /// Navigations will be blocked until all `NavigationStarting` and
  /// `CoreWebView2.FrameNavigationStarting` event handlers return.
  HRESULT add_NavigationStarting(
      [in] ICoreWebView2ExperimentalFrameNavigationStartingEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_NavigationStarting`.
  HRESULT remove_NavigationStarting(
      [in] EventRegistrationToken token);

  /// Add an event handler for the `ContentLoading` event.  `ContentLoading`
  /// triggers before any content is loaded, including scripts added with
  /// `AddScriptToExecuteOnDocumentCreated`.  `ContentLoading` does not trigger
  /// if a same page navigation occurs (such as through `fragment`
  /// navigations or `history.pushState` navigations).  This operation
  /// follows the `NavigationStarting` and precedes `NavigationCompleted` events.
  HRESULT add_ContentLoading(
      [in] ICoreWebView2ExperimentalFrameContentLoadingEventHandler * eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_ContentLoading`.
  HRESULT remove_ContentLoading(
      [in] EventRegistrationToken token);

  /// Add an event handler for the `NavigationCompleted` event.
  /// `NavigationCompleted` runs when the CoreWebView2Frame has completely
  /// loaded (concurrently when `body.onload` runs) or loading stopped with error.
  HRESULT add_NavigationCompleted(
      [in] ICoreWebView2ExperimentalFrameNavigationCompletedEventHandler *
          eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove an event handler previously added with `add_NavigationCompleted`.
  HRESULT remove_NavigationCompleted(
      [in] EventRegistrationToken token);

  /// Add an event handler for the DOMContentLoaded event.
  /// DOMContentLoaded is raised when the iframe html document has been parsed.
  /// This aligns with the document's DOMContentLoaded event in html.
  HRESULT add_DOMContentLoaded(
      [in] ICoreWebView2ExperimentalFrameDOMContentLoadedEventHandler * eventHandler,
      [out] EventRegistrationToken* token);
  /// Remove an event handler previously added with add_DOMContentLoaded.
  HRESULT remove_DOMContentLoaded(
      [in] EventRegistrationToken token);

  /// Run JavaScript code from the javascript parameter in the current frame.
  /// The result of evaluating the provided JavaScript is passed to the completion handler.
  /// The result value is a JSON encoded string. If the result is undefined,
  /// contains a reference cycle, or otherwise is not able to be encoded into
  /// JSON, then the result is considered to be null, which is encoded
  /// in JSON as the string "null".
  ///
  /// \> [!NOTE]\n\> A function that has no explicit return value returns undefined. If the
  /// script that was run throws an unhandled exception, then the result is
  /// also "null". This method is applied asynchronously. If the method is
  /// run before `ContentLoading`, the script will not be executed
  /// and the string "null" will be returned.
  /// This operation executes the script even if `ICoreWebView2Settings::IsScriptEnabled` is
  /// set to `FALSE`.
  ///
  /// \snippet ScenarioDOMContentLoaded.cpp ExecuteScriptFrame
  HRESULT ExecuteScript(
      [in] LPCWSTR javaScript,
      [in] ICoreWebView2ExecuteScriptCompletedHandler* handler);
}

/// Receives `NavigationStarting` events.
[uuid(e79908bf-2d5d-4968-83db-263fea2c1da3), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrameNavigationStartingEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2Frame* sender,
      [in] ICoreWebView2NavigationStartingEventArgs* args);
}

/// Receives `ContentLoading` events.
[uuid(0d6156f2-d332-49a7-9e03-7d8f2feeee54), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrameContentLoadingEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2Frame* sender,
      [in] ICoreWebView2ContentLoadingEventArgs* args);
}

/// Receives `NavigationCompleted` events.
[uuid(609302ad-0e36-4f9a-a210-6a45272842a9), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrameNavigationCompletedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2Frame* sender,
      [in] ICoreWebView2NavigationCompletedEventArgs* args);
}

/// Receives `DOMContentLoaded` events.
[uuid(38d9520d-340f-4d1e-a775-43fce9753683), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFrameDOMContentLoadedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.
  HRESULT Invoke(
      [in] ICoreWebView2Frame* sender,
      [in] ICoreWebView2DOMContentLoadedEventArgs* args);
}

/// Options used to create WebView2 Environment.  A default implementation is
/// provided in `webview2_experimental_environment_options.h`.
///
/// \snippet AppWindow.cpp CreateCoreWebView2EnvironmentWithOptions

[uuid(FF85C98A-1BA7-4A6B-90C8-2B752C89E9E2), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironmentOptions : IUnknown {

  /// Whether other processes can create WebView2 from WebView2Environment created with the
  /// same user data folder and therefore sharing the same WebView browser process instance.
  /// Default is FALSE.
  [propget] HRESULT ExclusiveUserDataFolderAccess([out, retval] BOOL* value);

  // Add the following to documentation when it is implemented.
  // Exclusive data folder access also opens optimization opportunities, such as more aggressive
  // CPU reduction for suspended WebViews.

  /// Sets the `ExclusiveUserDataFolderAccess` property.
  /// The `ExclusiveUserDataFolderAccess` property specifies that the WebView environment
  /// obtains exclusive access to the user data folder.
  /// If the user data folder is already being used by another WebView environment with
  /// different value for `ExclusiveUserDataFolderAccess` property, the creation of WebView2Controller
  /// using the environmen object will fail with `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)`.
  /// When set as TRUE, no other WebView can be created from other process using WebView2Environment
  /// objects with the same UserDataFolder. This prevents other processes from creating WebViews
  /// which share the same browser process instance, since sharing is performed among
  /// WebViews that have the same UserDataFolder. When another process tries to create
  /// WebView2Controller from an WebView2Environment object created with the same user data folder,
  /// it will fail with `HRESULT_FROM_WIN32(ERROR_INVALID_STATE)`.
  [propput] HRESULT ExclusiveUserDataFolderAccess([in] BOOL value);
}

/// This is the ICoreWebView2ExperimentalController2 interface.
/// The ICoreWebView2ExperimentalController2 provides interface to enable/disable external drop.
[uuid(320613e2-990f-4272-bf90-d243a4ff1b8a), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalController2 : IUnknown {
  /// Gets the `AllowExternalDrop` property which is used to configure the
  /// capability that dragging objects from outside the bounds of webview2 and
  /// dropping into webview2 is allowed or disallowed. The default value is
  /// TRUE.
  ///
  /// \snippet SettingsComponent.cpp ToggleAllowExternalDrop
  [propget] HRESULT AllowExternalDrop([ out, retval ] BOOL * value);
  /// Sets the `AllowExternalDrop` property which is used to configure the
  /// capability that dragging objects from outside the bounds of webview2 and
  /// dropping into webview2 is allowed or disallowed.
  ///
  /// \snippet SettingsComponent.cpp ToggleAllowExternalDrop
  [propput] HRESULT AllowExternalDrop([in] BOOL value);
}

/// Implements the interface to receive `IsDocumentPlayingAudioChanged` events.  Use the
/// IsDocumentPlayingAudio property to get the audio playing state.
[uuid(5DEF109A-2F4B-49FA-B7F6-11C39E513328), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalIsDocumentPlayingAudioChangedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.  No event args exist
  /// and the `args` parameter is set to `null`.
  HRESULT Invoke([in] ICoreWebView2* sender, [in] IUnknown* args);
}

/// Implements the interface to receive `IsMutedChanged` events.  Use the
/// IsMuted property to get the mute state.
[uuid(57D90347-CD0E-4952-A4A2-7483A2756F08), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalIsMutedChangedEventHandler : IUnknown {
  /// Provides the event args for the corresponding event.  No event args exist
  /// and the `args` parameter is set to `null`.
  HRESULT Invoke([in] ICoreWebView2* sender, [in] IUnknown* args);
}

/// Used to get ICoreWebView2ExperimentalProfile object.
///
/// \snippet AppWindow.cpp OnCreateCoreWebView2ControllerCompleted
[uuid(b753b024-05c5-40ac-a3f4-701c6f7491f5), object, pointer_default(unique)]
interface ICoreWebView2Experimental8 : IUnknown {
  /// The associated `ICoreWebView2ExperimentalProfile` object.
  [propget] HRESULT Profile([out, retval] ICoreWebView2ExperimentalProfile** value);
}

/// This interface is used to create CreateCoreWebView2ControllerOptions object, which
/// can be passed as a parameter in 'CreateCoreWebView2ControllerWithOptions' and
/// 'CreateCoreWebView2CompositionControllerWithOptions' function for multiple profile support.
///
/// \snippet AppWindow.cpp CreateControllerWithOptions
[uuid(ae714520-d062-4d20-9d08-5096f590ed1a), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment8 : IUnknown {
  /// Create a new ICoreWebView2ExperimentalControllerOptions to be passed as a parameter of
  /// CreateCoreWebView2ControllerWithOptions and CreateCoreWebView2CompositionControllerWithOptions.
  HRESULT CreateCoreWebView2ControllerOptions(
      [in] LPCWSTR profileName,
      [in] BOOL isInPrivateModeEnabled,
      [out, retval] ICoreWebView2ExperimentalControllerOptions** options);

  /// Create a new WebView with options.
  HRESULT CreateCoreWebView2ControllerWithOptions(
      [in] HWND parentWindow,
      [in] ICoreWebView2ExperimentalControllerOptions* options,
      [in] ICoreWebView2CreateCoreWebView2ControllerCompletedHandler* handler);

  /// Create a new WebView in visual hosting mode with options.
  HRESULT CreateCoreWebView2CompositionControllerWithOptions(
      [in] HWND parentWindow,
      [in] ICoreWebView2ExperimentalControllerOptions* options,
      [in] ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler* handler);
}

/// This interface is used to manage profile options that created by 'CreateCoreWebView2ControllerOptions'.
///
/// \snippet AppWindow.cpp CreateControllerWithOptions
[uuid(12aae616-8ccb-44ec-bcb3-eb1831881635), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalControllerOptions : IUnknown {
  /// `ProfileName` property is to specify a profile name, which is only allowed to contain
  /// the following ASCII characters. It has a maximum length of 64 characters excluding the null-terminator.
  /// It is ASCII case insensitive.
  ///
  /// * alphabet characters: a-z and A-Z
  /// * digit characters: 0-9
  /// * and '#', '@', '$', '(', ')', '+', '-', '_', '~', '.', ' ' (space).
  ///
  /// Note: the text must not end with a period '.' or ' ' (space). And, although upper-case letters are
  /// allowed, they're treated just as lower-case counterparts because the profile name will be mapped to
  /// the real profile directory path on disk and Windows file system handles path names in a case-insensitive way.
  [propget] HRESULT ProfileName([out, retval] LPWSTR* value);
  /// Sets the `ProfileName` property.
  [propput] HRESULT ProfileName([in] LPCWSTR value);

  /// `IsInPrivateModeEnabled` property is to enable/disable InPrivate mode.
  [propget] HRESULT IsInPrivateModeEnabled([out, retval] BOOL* value);
  /// Sets the `IsInPrivateModeEnabled` property.
  [propput] HRESULT IsInPrivateModeEnabled([in] BOOL value);
}

/// Profile for ICoreWebView2Experimental8 interface.
///
/// \snippet AppWindow.cpp OnCreateCoreWebView2ControllerCompleted
[uuid(05bfce49-57e2-4963-bbb8-3805ade3c481), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalProfile : IUnknown {
  /// Name of the profile.
  [propget] HRESULT ProfileName([out, retval] LPWSTR* value);

  /// InPrivate mode is enabled or not.
  [propget] HRESULT IsInPrivateModeEnabled([out, retval] BOOL* value);

  /// Full path of the profile directory.
  [propget] HRESULT ProfilePath([out, retval] LPWSTR* value);

  // TODO: All profile-wide operations/settings will be put below in the future.
}

}
