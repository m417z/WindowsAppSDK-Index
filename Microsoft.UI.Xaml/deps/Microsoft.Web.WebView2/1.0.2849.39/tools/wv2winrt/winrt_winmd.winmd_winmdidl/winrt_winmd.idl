//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace winrt_winmd
{
    typedef enum ConstantType ConstantType;

    typedef enum ElementType ElementType;

    interface IConstant;

    interface ICustomAttribute;

    interface ICustomAttributeSig;

    interface IElemSig;

    interface IEvent;

    interface IField;

    interface IFieldSig;

    interface IFixedArgSig;

    interface IGenericTypeInstSig;

    interface IInterfaceImpl;

    interface IMethodAttributes;

    interface IMethodDef;

    interface IMethodDefSig;

    interface IMethodSemantics;

    interface IMethodSemanticsAttributes;

    interface INamedArgSig;

    interface INamespace;

    interface IParam;

    interface IParamAttributes;

    interface IParamSig;

    interface IProperty;

    interface IPropertySig;

    interface IRetTypeSig;

    interface IRoot;

    interface IRootFactory;

    interface ITypeDef;

    interface ITypeRef;

    interface ITypeSig;

    runtimeclass Constant;

    runtimeclass CustomAttribute;

    runtimeclass CustomAttributeSig;

    runtimeclass ElemSig;

    runtimeclass Event;

    runtimeclass Field;

    runtimeclass FieldSig;

    runtimeclass FixedArgSig;

    runtimeclass GenericTypeInstSig;

    runtimeclass InterfaceImpl;

    runtimeclass MethodAttributes;

    runtimeclass MethodDef;

    runtimeclass MethodDefSig;

    runtimeclass MethodSemantics;

    runtimeclass MethodSemanticsAttributes;

    runtimeclass NamedArgSig;

    runtimeclass Namespace;

    runtimeclass Param;

    runtimeclass ParamAttributes;

    runtimeclass ParamSig;

    runtimeclass Property;

    runtimeclass PropertySig;

    runtimeclass RetTypeSig;

    runtimeclass Root;

    runtimeclass TypeDef;

    runtimeclass TypeRef;

    runtimeclass TypeSig;
}

// Generic instantiations
namespace winrt_winmd
{
    declare
    {
        interface Windows.Foundation.Collections.IIterable<winrt_winmd.CustomAttribute*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.ElemSig*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.Event*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.Field*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.FixedArgSig*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.InterfaceImpl*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.MethodDef*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.MethodSemantics*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.NamedArgSig*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.Namespace*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.Param*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.ParamSig*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.Property*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.TypeDef*>;

        interface Windows.Foundation.Collections.IIterable<winrt_winmd.TypeSig*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.CustomAttribute*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.ElemSig*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.Event*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.Field*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.FixedArgSig*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.InterfaceImpl*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.MethodDef*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.MethodSemantics*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.NamedArgSig*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.Namespace*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.Param*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.ParamSig*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.Property*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.TypeDef*>;

        interface Windows.Foundation.Collections.IIterator<winrt_winmd.TypeSig*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.ElemSig*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.Event*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.Field*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.FixedArgSig*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.InterfaceImpl*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.MethodDef*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.MethodSemantics*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.NamedArgSig*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.Namespace*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.Param*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.ParamSig*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.Property*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>;

        interface Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeSig*>;
    }
}

// Type definition
namespace winrt_winmd
{
    [version(0x00000001)]
    enum ConstantType
    {
        Boolean = 2,
        Char    = 3,
        Int8    = 4,
        UInt8   = 5,
        Int16   = 6,
        UInt16  = 7,
        Int32   = 8,
        UInt32  = 9,
        Int64   = 10,
        UInt64  = 11,
        Float32 = 12,
        Float64 = 13,
        String  = 14,
        Class   = 18
    };

    [flags]
    [version(0x00000001)]
    enum ElementType
    {
        End          = 0x0,
        Void         = 0x1,
        Boolean      = 0x2,
        Char         = 0x3,
        I1           = 0x4,
        U1           = 0x5,
        I2           = 0x6,
        U2           = 0x7,
        I4           = 0x8,
        U4           = 0x9,
        I8           = 0xA,
        U8           = 0xB,
        R4           = 0xC,
        R8           = 0xD,
        String       = 0xE,
        Ptr          = 0xF,
        ByRef        = 0x10,
        ValueType    = 0x11,
        Class        = 0x12,
        Var          = 0x13,
        Array        = 0x14,
        GenericInst  = 0x15,
        TypedByRef   = 0x16,
        I            = 0x18,
        U            = 0x19,
        FnPtr        = 0x1B,
        Object       = 0x1C,
        SZArray      = 0x1D,
        MVar         = 0x1E,
        CModReqd     = 0x1F,
        CModOpt      = 0x20,
        Internal     = 0x21,
        Modifier     = 0x40,
        Sentinel     = 0x41,
        Pinned       = 0x45,
        Type         = 0x50,
        TaggedObject = 0x51,
        Field        = 0x53,
        Property     = 0x54,
        Enum         = 0x55
    };

    [exclusiveto(winrt_winmd.Constant)]
    [uuid(38A3DC49-B672-555F-83AA-67FB85BCA00B)]
    [version(0x00000001)]
    interface IConstant : IInspectable
    {
        [propget] HRESULT Type([out] [retval] winrt_winmd.ConstantType* value);
        [propget] HRESULT Valid([out] [retval] boolean* value);
        [propget] HRESULT ValueInt32([out] [retval] INT32* value);
        [propget] HRESULT ValueUInt32([out] [retval] UINT32* value);
    }

    [exclusiveto(winrt_winmd.CustomAttribute)]
    [uuid(2ACEB5E0-C551-5DFD-9C8F-88E595A288A8)]
    [version(0x00000001)]
    interface ICustomAttribute : IInspectable
    {
        [propget] HRESULT TypeNamespace([out] [retval] HSTRING* value);
        [propget] HRESULT TypeName([out] [retval] HSTRING* value);
        [propget] HRESULT Value([out] [retval] winrt_winmd.CustomAttributeSig** value);
    }

    [exclusiveto(winrt_winmd.CustomAttributeSig)]
    [uuid(5FE579FE-1E09-5EB5-96D2-8E807DB05855)]
    [version(0x00000001)]
    interface ICustomAttributeSig : IInspectable
    {
        [propget] HRESULT FixedArgs([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.FixedArgSig*>** value);
        [propget] HRESULT NamedArgs([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.NamedArgSig*>** value);
    }

    [exclusiveto(winrt_winmd.ElemSig)]
    [uuid(BCF2EC22-C669-5CA8-9F8F-5E4DDCBCF358)]
    [version(0x00000001)]
    interface IElemSig : IInspectable
    {
        [propget] HRESULT HasSystemType([out] [retval] boolean* value);
        [propget] HRESULT SystemType([out] [retval] HSTRING* value);
        [propget] HRESULT HasStringValue([out] [retval] boolean* value);
        [propget] HRESULT StringValue([out] [retval] HSTRING* value);
        [propget] HRESULT HasInt32Value([out] [retval] boolean* value);
        [propget] HRESULT Int32Value([out] [retval] INT32* value);
        [propget] HRESULT HasUInt32Value([out] [retval] boolean* value);
        [propget] HRESULT UInt32Value([out] [retval] UINT32* value);
        [propget] HRESULT HasUInt16Value([out] [retval] boolean* value);
        [propget] HRESULT UInt16Value([out] [retval] UINT16* value);
        [propget] HRESULT HasByteValue([out] [retval] boolean* value);
        [propget] HRESULT ByteValue([out] [retval] BYTE* value);
    }

    [exclusiveto(winrt_winmd.Event)]
    [uuid(426384FF-8755-59C8-91FF-E3D93528C2C3)]
    [version(0x00000001)]
    interface IEvent : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
        [propget] HRESULT HasEventTypeDef([out] [retval] boolean* value);
        [propget] HRESULT EventTypeDef([out] [retval] winrt_winmd.TypeDef** value);
        [propget] HRESULT HasEventTypeRef([out] [retval] boolean* value);
        [propget] HRESULT EventTypeRef([out] [retval] winrt_winmd.TypeRef** value);
        [propget] HRESULT HasGenericTypeInstSig([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeInstSig([out] [retval] winrt_winmd.GenericTypeInstSig** value);
    }

    [exclusiveto(winrt_winmd.Field)]
    [uuid(4ABEBB40-6F4C-51DE-8CA3-063BEF9F637B)]
    [version(0x00000001)]
    interface IField : IInspectable
    {
        [propget] HRESULT Constant([out] [retval] winrt_winmd.Constant** value);
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
        [propget] HRESULT Signature([out] [retval] winrt_winmd.FieldSig** value);
    }

    [exclusiveto(winrt_winmd.FieldSig)]
    [uuid(C8824CB8-A692-5113-B133-27307F967C2D)]
    [version(0x00000001)]
    interface IFieldSig : IInspectable
    {
        [propget] HRESULT Type([out] [retval] winrt_winmd.TypeSig** value);
    }

    [exclusiveto(winrt_winmd.FixedArgSig)]
    [uuid(8818BA26-A42D-5D4E-83F7-ECCFC119F9F8)]
    [version(0x00000001)]
    interface IFixedArgSig : IInspectable
    {
        [propget] HRESULT HasElemSigs([out] [retval] boolean* value);
        [propget] HRESULT ElemSigs([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.ElemSig*>** value);
        [propget] HRESULT HasElemSig([out] [retval] boolean* value);
        [propget] HRESULT ElemSig([out] [retval] winrt_winmd.ElemSig** value);
    }

    [exclusiveto(winrt_winmd.GenericTypeInstSig)]
    [uuid(0E425688-8491-5280-A986-FFB216060893)]
    [version(0x00000001)]
    interface IGenericTypeInstSig : IInspectable
    {
        [propget] HRESULT ClassOrValueType([out] [retval] winrt_winmd.ElementType* value);
        [propget] HRESULT HasGenericTypeDef([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeDef([out] [retval] winrt_winmd.TypeDef** value);
        [propget] HRESULT HasGenericTypeRef([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeRef([out] [retval] winrt_winmd.TypeRef** value);
        [propget] HRESULT GenericArgs([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeSig*>** value);
    }

    [exclusiveto(winrt_winmd.InterfaceImpl)]
    [uuid(3598383A-86DD-5E74-8CE2-AEE640156F97)]
    [version(0x00000001)]
    interface IInterfaceImpl : IInspectable
    {
        [propget] HRESULT Class([out] [retval] winrt_winmd.TypeDef** value);
        [propget] HRESULT HasTypeDef([out] [retval] boolean* value);
        [propget] HRESULT TypeDef([out] [retval] winrt_winmd.TypeDef** value);
        [propget] HRESULT HasTypeRef([out] [retval] boolean* value);
        [propget] HRESULT TypeRef([out] [retval] winrt_winmd.TypeRef** value);
        [propget] HRESULT HasGenericTypeInstSig([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeInstSig([out] [retval] winrt_winmd.GenericTypeInstSig** value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
    }

    [exclusiveto(winrt_winmd.MethodAttributes)]
    [uuid(A167493B-921C-5D5E-B2DC-E8AB1C21783D)]
    [version(0x00000001)]
    interface IMethodAttributes : IInspectable
    {
        [propget] HRESULT Static([out] [retval] boolean* value);
        [propget] HRESULT Final([out] [retval] boolean* value);
        [propget] HRESULT Virtual([out] [retval] boolean* value);
        [propget] HRESULT HideBySig([out] [retval] boolean* value);
        [propget] HRESULT Strict([out] [retval] boolean* value);
        [propget] HRESULT Abstract([out] [retval] boolean* value);
        [propget] HRESULT SpecialName([out] [retval] boolean* value);
        [propget] HRESULT PInvokeImpl([out] [retval] boolean* value);
        [propget] HRESULT UnmanagedExport([out] [retval] boolean* value);
        [propget] HRESULT RTSpecialName([out] [retval] boolean* value);
        [propget] HRESULT HasSecurity([out] [retval] boolean* value);
        [propget] HRESULT RequireSecObject([out] [retval] boolean* value);
    }

    [exclusiveto(winrt_winmd.MethodDef)]
    [uuid(A4253F5C-06DF-512A-8797-CFC8BB465BD3)]
    [version(0x00000001)]
    interface IMethodDef : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Flags([out] [retval] winrt_winmd.MethodAttributes** value);
        [propget] HRESULT SpecialName([out] [retval] boolean* value);
        [propget] HRESULT Signature([out] [retval] winrt_winmd.MethodDefSig** value);
        [propget] HRESULT ParamList([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.Param*>** value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
        [propget] HRESULT Parent([out] [retval] winrt_winmd.TypeDef** value);
    }

    [exclusiveto(winrt_winmd.MethodDefSig)]
    [uuid(10EDC7E2-FE65-5166-B29C-6850144B40C1)]
    [version(0x00000001)]
    interface IMethodDefSig : IInspectable
    {
        [propget] HRESULT ReturnType([out] [retval] winrt_winmd.RetTypeSig** value);
        [propget] HRESULT Params([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.ParamSig*>** value);
    }

    [exclusiveto(winrt_winmd.MethodSemantics)]
    [uuid(21237FC1-FC28-5D60-84BB-45A59111A934)]
    [version(0x00000001)]
    interface IMethodSemantics : IInspectable
    {
        [propget] HRESULT Semantic([out] [retval] winrt_winmd.MethodSemanticsAttributes** value);
    }

    [exclusiveto(winrt_winmd.MethodSemanticsAttributes)]
    [uuid(8C401D7C-CCFC-5873-9CA8-D423B7367B82)]
    [version(0x00000001)]
    interface IMethodSemanticsAttributes : IInspectable
    {
        [propget] HRESULT Setter([out] [retval] boolean* value);
        [propget] HRESULT Getter([out] [retval] boolean* value);
        [propget] HRESULT Other([out] [retval] boolean* value);
        [propget] HRESULT AddOn([out] [retval] boolean* value);
        [propget] HRESULT RemoveOn([out] [retval] boolean* value);
        [propget] HRESULT Fire([out] [retval] boolean* value);
    }

    [exclusiveto(winrt_winmd.NamedArgSig)]
    [uuid(782D32E2-42C3-5486-A043-80ADEF98E454)]
    [version(0x00000001)]
    interface INamedArgSig : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Value([out] [retval] winrt_winmd.FixedArgSig** value);
    }

    [exclusiveto(winrt_winmd.Namespace)]
    [uuid(1A47C6AE-CE80-536A-AC69-01A99D207262)]
    [version(0x00000001)]
    interface INamespace : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Classes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>** value);
        [propget] HRESULT Delegates([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>** value);
        [propget] HRESULT Enums([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>** value);
        [propget] HRESULT Interfaces([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>** value);
        [propget] HRESULT Structs([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.TypeDef*>** value);
    }

    [exclusiveto(winrt_winmd.Param)]
    [uuid(DC0F9D35-4492-5FB4-B66E-E0770AF6ACD2)]
    [version(0x00000001)]
    interface IParam : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Flags([out] [retval] winrt_winmd.ParamAttributes** value);
    }

    [exclusiveto(winrt_winmd.ParamAttributes)]
    [uuid(1D03B83C-335F-5F9F-83E4-D2E900408D98)]
    [version(0x00000001)]
    interface IParamAttributes : IInspectable
    {
        [propget] HRESULT In([out] [retval] boolean* value);
        [propget] HRESULT Out([out] [retval] boolean* value);
        [propget] HRESULT Optional([out] [retval] boolean* value);
        [propget] HRESULT HasDefault([out] [retval] boolean* value);
        [propget] HRESULT HasFieldMarshal([out] [retval] boolean* value);
    }

    [exclusiveto(winrt_winmd.ParamSig)]
    [uuid(967DCDBC-F1C9-5059-8F65-0768E9858EDB)]
    [version(0x00000001)]
    interface IParamSig : IInspectable
    {
        [propget] HRESULT ByRef([out] [retval] boolean* value);
        [propget] HRESULT Type([out] [retval] winrt_winmd.TypeSig** value);
    }

    [exclusiveto(winrt_winmd.Property)]
    [uuid(551E0612-1EDA-52D3-AF2E-DBF06E8C247E)]
    [version(0x00000001)]
    interface IProperty : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Type([out] [retval] winrt_winmd.PropertySig** value);
        [propget] HRESULT MethodSemantic([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.MethodSemantics*>** value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
    }

    [exclusiveto(winrt_winmd.PropertySig)]
    [uuid(D30EF141-8F2D-55B2-B8E0-77FF03461217)]
    [version(0x00000001)]
    interface IPropertySig : IInspectable
    {
        [propget] HRESULT Type([out] [retval] winrt_winmd.TypeSig** value);
    }

    [exclusiveto(winrt_winmd.RetTypeSig)]
    [uuid(AAC21D87-B592-5577-A8A5-AE5C048C935C)]
    [version(0x00000001)]
    interface IRetTypeSig : IInspectable
    {
        [propget] HRESULT ByRef([out] [retval] boolean* value);
        [propget] HRESULT HasType([out] [retval] boolean* value);
        [propget] HRESULT Type([out] [retval] winrt_winmd.TypeSig** value);
    }

    [exclusiveto(winrt_winmd.Root)]
    [uuid(BD926055-2CD6-5FE4-82E6-432C338F963D)]
    [version(0x00000001)]
    interface IRoot : IInspectable
    {
        [propget] HRESULT Namespaces([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.Namespace*>** value);
        HRESULT Find([in] HSTRING namespaceName, [in] HSTRING name, [out] [retval] winrt_winmd.TypeDef** result);
    }

    [exclusiveto(winrt_winmd.Root)]
    [uuid(A381E2DB-8240-5887-A5EB-C8638F866710)]
    [version(0x00000001)]
    interface IRootFactory : IInspectable
    {
        HRESULT CreateInstance([in] Windows.Foundation.Collections.IVectorView<HSTRING>* fileNames, [out] [retval] winrt_winmd.Root** value);
    }

    [exclusiveto(winrt_winmd.TypeDef)]
    [uuid(C73C6ADC-5E8A-5950-8B62-F51658065DC1)]
    [version(0x00000001)]
    interface ITypeDef : IInspectable
    {
        [propget] HRESULT IsValid([out] [retval] boolean* value);
        [propget] HRESULT IsInterface([out] [retval] boolean* value);
        [propget] HRESULT IsStruct([out] [retval] boolean* value);
        [propget] HRESULT IsEnum([out] [retval] boolean* value);
        [propget] HRESULT HasGenericParams([out] [retval] boolean* value);
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT Namespace([out] [retval] HSTRING* value);
        [propget] HRESULT FieldList([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.Field*>** value);
        [propget] HRESULT InterfaceImpls([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.InterfaceImpl*>** value);
        [propget] HRESULT CustomAttributes([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.CustomAttribute*>** value);
        [propget] HRESULT MethodList([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.MethodDef*>** value);
        [propget] HRESULT PropertyList([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.Property*>** value);
        [propget] HRESULT EventList([out] [retval] Windows.Foundation.Collections.IVectorView<winrt_winmd.Event*>** value);
    }

    [exclusiveto(winrt_winmd.TypeRef)]
    [uuid(C3565575-006C-5C50-9574-80D04CB3D1FE)]
    [version(0x00000001)]
    interface ITypeRef : IInspectable
    {
        [propget] HRESULT TypeName([out] [retval] HSTRING* value);
        [propget] HRESULT TypeNamespace([out] [retval] HSTRING* value);
    }

    [exclusiveto(winrt_winmd.TypeSig)]
    [uuid(FB1CCE74-8268-5E7E-BD27-15D612AD1F29)]
    [version(0x00000001)]
    interface ITypeSig : IInspectable
    {
        [propget] HRESULT HasTypeDef([out] [retval] boolean* value);
        [propget] HRESULT TypeDef([out] [retval] winrt_winmd.TypeDef** value);
        [propget] HRESULT HasTypeRef([out] [retval] boolean* value);
        [propget] HRESULT TypeRef([out] [retval] winrt_winmd.TypeRef** value);
        [propget] HRESULT HasElementType([out] [retval] boolean* value);
        [propget] HRESULT ElementType([out] [retval] winrt_winmd.ElementType* value);
        [propget] HRESULT HasGenericTypeIndex([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeIndex([out] [retval] UINT32* value);
        [propget] HRESULT HasGenericTypeInstSig([out] [retval] boolean* value);
        [propget] HRESULT GenericTypeInstSig([out] [retval] winrt_winmd.GenericTypeInstSig** value);
        [propget] HRESULT HasGenericMethodTypeIndex([out] [retval] boolean* value);
        [propget] HRESULT GenericMethodTypeIndex([out] [retval] UINT32* value);
        [propget] HRESULT IsArray([out] [retval] boolean* value);
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Constant
    {
        [default] interface winrt_winmd.IConstant;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass CustomAttribute
    {
        [default] interface winrt_winmd.ICustomAttribute;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass CustomAttributeSig
    {
        [default] interface winrt_winmd.ICustomAttributeSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass ElemSig
    {
        [default] interface winrt_winmd.IElemSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Event
    {
        [default] interface winrt_winmd.IEvent;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Field
    {
        [default] interface winrt_winmd.IField;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass FieldSig
    {
        [default] interface winrt_winmd.IFieldSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass FixedArgSig
    {
        [default] interface winrt_winmd.IFixedArgSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass GenericTypeInstSig
    {
        [default] interface winrt_winmd.IGenericTypeInstSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass InterfaceImpl
    {
        [default] interface winrt_winmd.IInterfaceImpl;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass MethodAttributes
    {
        [default] interface winrt_winmd.IMethodAttributes;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass MethodDef
    {
        [default] interface winrt_winmd.IMethodDef;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass MethodDefSig
    {
        [default] interface winrt_winmd.IMethodDefSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass MethodSemantics
    {
        [default] interface winrt_winmd.IMethodSemantics;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass MethodSemanticsAttributes
    {
        [default] interface winrt_winmd.IMethodSemanticsAttributes;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass NamedArgSig
    {
        [default] interface winrt_winmd.INamedArgSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Namespace
    {
        [default] interface winrt_winmd.INamespace;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Param
    {
        [default] interface winrt_winmd.IParam;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass ParamAttributes
    {
        [default] interface winrt_winmd.IParamAttributes;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass ParamSig
    {
        [default] interface winrt_winmd.IParamSig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass Property
    {
        [default] interface winrt_winmd.IProperty;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass PropertySig
    {
        [default] interface winrt_winmd.IPropertySig;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass RetTypeSig
    {
        [default] interface winrt_winmd.IRetTypeSig;
    }

    [activatable(winrt_winmd.IRootFactory, 0x00000001)]
    [marshaling_behavior(agile)]
    [threading(both)]
    [version(0x00000001)]
    runtimeclass Root
    {
        [default] interface winrt_winmd.IRoot;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass TypeDef
    {
        [default] interface winrt_winmd.ITypeDef;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass TypeRef
    {
        [default] interface winrt_winmd.ITypeRef;
    }

    [marshaling_behavior(agile)]
    [version(0x00000001)]
    runtimeclass TypeSig
    {
        [default] interface winrt_winmd.ITypeSig;
    }
}
