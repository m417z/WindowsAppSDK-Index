//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Workloads
            {
                apicontract WorkloadsContract;

                typedef enum WorkloadProgressStatus WorkloadProgressStatus;

                typedef enum WorkloadStatus WorkloadStatus;

                interface IWorkload;

                interface IWorkloadHandler;

                interface IWorkloadManager;

                interface IWorkloadManagerStatics;

                interface IWorkloadProgress;

                interface IWorkloadResult;

                runtimeclass Workload;

                runtimeclass WorkloadManager;

                runtimeclass WorkloadProgress;

                runtimeclass WorkloadResult;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Workloads
            {
                declare
                {
                    interface Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.System.Workloads.WorkloadResult*, Microsoft.Windows.System.Workloads.WorkloadProgress*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Workloads
            {
                [contractversion(1.0)]
                [experimental]
                apicontract WorkloadsContract
                {
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                enum WorkloadProgressStatus
                {
                    Queued           = 0,
                    InProgress       = 1,
                    CompletedSuccess = 2,
                    CompletedFailure = 3
                };

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                enum WorkloadStatus
                {
                    InProgress       = 0,
                    CompletedSuccess = 1,
                    CompletedFailure = 2
                };

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Workloads.Workload)]
                [experimental]
                [uuid(5D88125E-3CFD-51D8-BE53-FD2AD296DF4B)]
                interface IWorkload : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propget] HRESULT WorkloadHandlerActivatableClassId([out] [retval] HSTRING* value);
                    [propget] HRESULT WorkloadHandler([out] [retval] Microsoft.Windows.System.Workloads.IWorkloadHandler** value);
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                [uuid(2704DF02-2050-58C6-ADFC-FA8C5EDCC0F4)]
                interface IWorkloadHandler : IInspectable
                {
                    HRESULT RemoveAsync([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.System.Workloads.WorkloadResult*, Microsoft.Windows.System.Workloads.WorkloadProgress*>** operation);
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Workloads.WorkloadManager)]
                [experimental]
                [uuid(1B610FEA-2305-519F-B0AC-4D31744B5C83)]
                interface IWorkloadManager : IInspectable
                {
                    HRESULT GetWorkload([in] HSTRING id, [out] [retval] Microsoft.Windows.System.Workloads.Workload** result);
                    HRESULT FindIds([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** result);
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Workloads.WorkloadManager)]
                [experimental]
                [uuid(963F2789-5B4F-532E-B70F-EEFE1F8FF528)]
                interface IWorkloadManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.System.Workloads.WorkloadManager** result);
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Workloads.WorkloadProgress)]
                [experimental]
                [uuid(8C3B7F4F-9507-592F-8451-78EBF233595A)]
                interface IWorkloadProgress : IInspectable
                {
                    [propget] HRESULT status([out] [retval] Microsoft.Windows.System.Workloads.WorkloadProgressStatus* value);
                    [propput] HRESULT status([in] Microsoft.Windows.System.Workloads.WorkloadProgressStatus value);
                    [propget] HRESULT percentage([out] [retval] DOUBLE* value);
                    [propput] HRESULT percentage([in] DOUBLE value);
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Workloads.WorkloadResult)]
                [experimental]
                [uuid(D38CF74A-4BD6-5335-B28F-109B06F6E668)]
                interface IWorkloadResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.System.Workloads.WorkloadStatus* value);
                    [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
                }

                [activatable(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass Workload
                {
                    [default] [experimental] interface Microsoft.Windows.System.Workloads.IWorkload;
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.System.Workloads.IWorkloadManagerStatics, Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [threading(both)]
                runtimeclass WorkloadManager
                {
                    [default] [experimental] interface Microsoft.Windows.System.Workloads.IWorkloadManager;
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass WorkloadProgress
                {
                    [default] [experimental] interface Microsoft.Windows.System.Workloads.IWorkloadProgress;
                }

                [contract(Microsoft.Windows.System.Workloads.WorkloadsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass WorkloadResult
                {
                    [default] [experimental] interface Microsoft.Windows.System.Workloads.IWorkloadResult;
                }
            }
        }
    }
}
