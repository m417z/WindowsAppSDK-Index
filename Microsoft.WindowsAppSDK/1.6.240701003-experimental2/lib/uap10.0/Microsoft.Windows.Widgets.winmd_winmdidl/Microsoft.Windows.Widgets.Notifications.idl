//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Windows.Widgets.idl";
import "Microsoft.Windows.Widgets.Providers.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            namespace Providers
            {
                runtimeclass WidgetContext;
            }
        }
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            apicontract WidgetContract;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            namespace Notifications
            {
                typedef enum AnnouncementActionKind AnnouncementActionKind;

                typedef enum AnnouncementTextColor AnnouncementTextColor;

                interface IFeedAnnouncement;

                interface IFeedAnnouncementFactory;

                interface IFeedAnnouncementInvokedArgs;

                interface IWidgetAnnouncement;

                interface IWidgetAnnouncementFactory;

                interface IWidgetAnnouncementInvokedArgs;

                runtimeclass FeedAnnouncement;

                runtimeclass FeedAnnouncementInvokedArgs;

                runtimeclass WidgetAnnouncement;

                runtimeclass WidgetAnnouncementInvokedArgs;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            namespace Notifications
            {
                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                enum AnnouncementActionKind
                {
                    Shown   = 0,
                    Engaged = 1
                };

                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                enum AnnouncementTextColor
                {
                    Default   = 0,
                    Dark      = 1,
                    Light     = 2,
                    Accent    = 3,
                    Good      = 4,
                    Warning   = 5,
                    Attention = 6
                };

                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.FeedAnnouncement)]
                [uuid(B88E8C2C-D251-5344-ACC2-8CF9BA07EC15)]
                interface IFeedAnnouncement : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PrimaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT PrimaryText([in] HSTRING value);
                    [propget] HRESULT SecondaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT SecondaryText([in] HSTRING value);
                    [propget] HRESULT LightModeIconUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT LightModeIconUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT DarkModeIconUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT DarkModeIconUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT PrimaryTextColor([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor* value);
                    [propput] HRESULT PrimaryTextColor([in] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value);
                    [propget] HRESULT SecondaryTextColor([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor* value);
                    [propput] HRESULT SecondaryTextColor([in] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value);
                    [propget] HRESULT CustomAccessibilityText([out] [retval] HSTRING* value);
                    [propput] HRESULT CustomAccessibilityText([in] HSTRING value);
                    [propget] HRESULT IsSecondaryTextSubtle([out] [retval] boolean* value);
                    [propput] HRESULT IsSecondaryTextSubtle([in] boolean value);
                    [propget] HRESULT ShowBadgeIfUserNotEngaged([out] [retval] boolean* value);
                    [propput] HRESULT ShowBadgeIfUserNotEngaged([in] boolean value);
                    [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT ExpirationTime([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.FeedAnnouncement)]
                [uuid(22074243-46D8-5AF2-8715-1C76D1CB774C)]
                interface IFeedAnnouncementFactory : IInspectable
                {
                    HRESULT CreateInstance([in] HSTRING id, [in] HSTRING primaryText, [in] HSTRING secondaryText, [in] Windows.Foundation.Uri* lightModeIcon, [in] Windows.Foundation.Uri* darkModeIcon, [out] [retval] Microsoft.Windows.Widgets.Notifications.FeedAnnouncement** value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs)]
                [uuid(70A48D98-323D-5F19-A1E1-B63FE36EDBF2)]
                interface IFeedAnnouncementInvokedArgs : IInspectable
                {
                    [propget] HRESULT FeedProviderDefinitionId([out] [retval] HSTRING* value);
                    [propget] HRESULT FeedDefinitionId([out] [retval] HSTRING* value);
                    [propget] HRESULT AnnouncementId([out] [retval] HSTRING* value);
                    [propget] HRESULT ActionKind([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementActionKind* value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.WidgetAnnouncement)]
                [experimental]
                [uuid(368F2EB5-13DB-5C68-82B9-5EDD68530C87)]
                interface IWidgetAnnouncement : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PrimaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT PrimaryText([in] HSTRING value);
                    [propget] HRESULT SecondaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT SecondaryText([in] HSTRING value);
                    [propget] HRESULT LightModeIconUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT LightModeIconUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT DarkModeIconUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT DarkModeIconUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT PrimaryTextColor([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor* value);
                    [propput] HRESULT PrimaryTextColor([in] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value);
                    [propget] HRESULT SecondaryTextColor([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor* value);
                    [propput] HRESULT SecondaryTextColor([in] Microsoft.Windows.Widgets.Notifications.AnnouncementTextColor value);
                    [propget] HRESULT CustomAccessibilityText([out] [retval] HSTRING* value);
                    [propput] HRESULT CustomAccessibilityText([in] HSTRING value);
                    [propget] HRESULT IsSecondaryTextSubtle([out] [retval] boolean* value);
                    [propput] HRESULT IsSecondaryTextSubtle([in] boolean value);
                    [propget] HRESULT ShowBadgeIfUserNotEngaged([out] [retval] boolean* value);
                    [propput] HRESULT ShowBadgeIfUserNotEngaged([in] boolean value);
                    [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT ExpirationTime([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.WidgetAnnouncement)]
                [experimental]
                [uuid(A12AEF6F-0459-54EE-9E2F-8075ED881731)]
                interface IWidgetAnnouncementFactory : IInspectable
                {
                    HRESULT CreateInstance([in] HSTRING id, [in] HSTRING primaryText, [in] HSTRING secondaryText, [in] Windows.Foundation.Uri* lightModeIcon, [in] Windows.Foundation.Uri* darkModeIcon, [out] [retval] Microsoft.Windows.Widgets.Notifications.WidgetAnnouncement** value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Notifications.WidgetAnnouncementInvokedArgs)]
                [experimental]
                [uuid(DAD35062-12F9-5F26-AF38-699EA6E9C8A0)]
                interface IWidgetAnnouncementInvokedArgs : IInspectable
                {
                    [propget] HRESULT WidgetContext([out] [retval] Microsoft.Windows.Widgets.Providers.WidgetContext** value);
                    [propget] HRESULT AnnouncementId([out] [retval] HSTRING* value);
                    [propget] HRESULT ActionKind([out] [retval] Microsoft.Windows.Widgets.Notifications.AnnouncementActionKind* value);
                }

                [activatable(Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementFactory, Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FeedAnnouncement
                {
                    [default] interface Microsoft.Windows.Widgets.Notifications.IFeedAnnouncement;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 5.0)]
                [marshaling_behavior(agile)]
                runtimeclass FeedAnnouncementInvokedArgs
                {
                    [default] interface Microsoft.Windows.Widgets.Notifications.IFeedAnnouncementInvokedArgs;
                }

                [activatable(Microsoft.Windows.Widgets.Notifications.IWidgetAnnouncementFactory, Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [contract(Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass WidgetAnnouncement
                {
                    [default] [experimental] interface Microsoft.Windows.Widgets.Notifications.IWidgetAnnouncement;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 7.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass WidgetAnnouncementInvokedArgs
                {
                    [default] [experimental] interface Microsoft.Windows.Widgets.Notifications.IWidgetAnnouncementInvokedArgs;
                }
            }
        }
    }
}
