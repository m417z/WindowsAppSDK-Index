//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Windows.ApplicationModel.DynamicDependency.idl";
import "Windows.ApplicationModel.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace ApplicationModel
        {
            namespace DynamicDependency
            {
                runtimeclass AddPackageDependencyOptions;

                runtimeclass CreatePackageDependencyOptions;

                typedef struct PackageDependencyContextId PackageDependencyContextId;

                typedef enum PackageDependencyProcessorArchitectures PackageDependencyProcessorArchitectures;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        typedef struct PackageVersion PackageVersion;
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Uri;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                apicontract PackageDeploymentContract;

                typedef enum PackageDeploymentProgressStatus PackageDeploymentProgressStatus;

                typedef enum PackageDeploymentStatus PackageDeploymentStatus;

                typedef enum StubPackageOption StubPackageOption;

                typedef struct PackageDeploymentProgress PackageDeploymentProgress;

                interface IAddPackageOptions;

                interface IEnsureReadyOptions;

                interface IPackageDeploymentManager;

                interface IPackageDeploymentManagerStatics;

                interface IPackageDeploymentResult;

                interface IPackageRuntimeManager;

                interface IPackageRuntimeManagerStatics;

                interface IPackageSet;

                interface IPackageSetItem;

                interface IPackageSetItemRuntimeDisposition;

                interface IPackageSetRuntimeDisposition;

                interface IPackageVolume;

                interface IPackageVolumeStatics;

                interface IProvisionPackageOptions;

                interface IRegisterPackageOptions;

                interface IRemovePackageOptions;

                interface IStagePackageOptions;

                runtimeclass AddPackageOptions;

                runtimeclass EnsureReadyOptions;

                runtimeclass PackageDeploymentManager;

                runtimeclass PackageDeploymentResult;

                runtimeclass PackageRuntimeManager;

                runtimeclass PackageSet;

                runtimeclass PackageSetItem;

                runtimeclass PackageSetItemRuntimeDisposition;

                runtimeclass PackageSetRuntimeDisposition;

                runtimeclass PackageVolume;

                runtimeclass ProvisionPackageOptions;

                runtimeclass RegisterPackageOptions;

                runtimeclass RemovePackageOptions;

                runtimeclass StagePackageOptions;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                [contractversion(1.0)]
                apicontract PackageDeploymentContract
                {
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                enum PackageDeploymentProgressStatus
                {
                    Queued           = 0,
                    InProgress       = 1,
                    CompletedSuccess = 2,
                    CompletedFailure = 3
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                enum PackageDeploymentStatus
                {
                    InProgress       = 0,
                    CompletedSuccess = 1,
                    CompletedFailure = 2
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                enum StubPackageOption
                {
                    Default       = 0,
                    InstallFull   = 1,
                    InstallStub   = 2,
                    UsePreference = 3
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                struct PackageDeploymentProgress
                {
                    Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus Status;
                    DOUBLE Progress;
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.AddPackageOptions)]
                [uuid(E3DB7F39-F9D0-5884-BDEF-6153B54574A3)]
                interface IAddPackageOptions : IInspectable
                {
                    [propget] HRESULT TargetVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT TargetVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT OptionalPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT RelatedPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT StubPackageOption([out] [retval] Microsoft.Windows.Management.Deployment.StubPackageOption* value);
                    [propput] HRESULT StubPackageOption([in] Microsoft.Windows.Management.Deployment.StubPackageOption value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceAppShutdown([in] boolean value);
                    [propget] HRESULT ForceTargetAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceTargetAppShutdown([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT RequiredContentGroupOnly([out] [retval] boolean* value);
                    [propput] HRESULT RequiredContentGroupOnly([in] boolean value);
                    [propget] HRESULT RetainFilesOnFailure([out] [retval] boolean* value);
                    [propput] HRESULT RetainFilesOnFailure([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT DeferRegistrationWhenPackagesAreInUse([out] [retval] boolean* value);
                    [propput] HRESULT DeferRegistrationWhenPackagesAreInUse([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                    [propget] HRESULT IsLimitToExistingPackagesSupported([out] [retval] boolean* value);
                    [propget] HRESULT LimitToExistingPackages([out] [retval] boolean* value);
                    [propput] HRESULT LimitToExistingPackages([in] boolean value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.EnsureReadyOptions)]
                [uuid(20102D03-EC44-5C2B-8FD6-1104DC99755D)]
                interface IEnsureReadyOptions : IInspectable
                {
                    [propget] HRESULT AddPackageOptions([out] [retval] Microsoft.Windows.Management.Deployment.AddPackageOptions** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentManager)]
                [uuid(F41717D8-5AB2-57AC-83CD-D0C48CC784CD)]
                interface IPackageDeploymentManager : IInspectable
                {
                    HRESULT IsPackageReady([in] HSTRING package, [out] [retval] boolean* result);
                    HRESULT IsPackageReadyByUri([in] Windows.Foundation.Uri* packageUri, [out] [retval] boolean* result);
                    HRESULT IsPackageSetReady([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] boolean* result);
                    HRESULT EnsurePackageReadyAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.EnsureReadyOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT EnsurePackageReadyByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.EnsureReadyOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT EnsurePackageSetReadyAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.EnsureReadyOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT AddPackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.AddPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT AddPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.AddPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT AddPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.AddPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT StagePackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.StagePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT StagePackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.StagePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT StagePackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.StagePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RegisterPackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.RegisterPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RegisterPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.RegisterPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RegisterPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.RegisterPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RemovePackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RemovePackageByFullNameAsync([in] HSTRING packageFullName, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RemovePackageByFamilyNameAsync([in] HSTRING packageFamilyName, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RemovePackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RemovePackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ResetPackageAsync([in] HSTRING package, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ResetPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ResetPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RepairPackageAsync([in] HSTRING package, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RepairPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT RepairPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ProvisionPackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.ProvisionPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ProvisionPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.ProvisionPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT ProvisionPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.ProvisionPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT DeprovisionPackageAsync([in] HSTRING package, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT DeprovisionPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT DeprovisionPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>** operation);
                    HRESULT IsPackageRegistrationPending([in] HSTRING packageFamilyName, [out] [retval] boolean* result);
                    HRESULT IsPackageRegistrationPendingForUser([in] HSTRING userSecurityId, [in] HSTRING packageFamilyName, [out] [retval] boolean* result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentManager)]
                [uuid(DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2)]
                interface IPackageDeploymentManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Management.Deployment.PackageDeploymentManager** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentResult)]
                [uuid(D6B99601-18C2-599E-8BD1-40A9310AD263)]
                interface IPackageDeploymentResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.Management.Deployment.PackageDeploymentStatus* value);
                    [propget] HRESULT Error([out] [retval] HRESULT* value);
                    [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
                    [propget] HRESULT ErrorText([out] [retval] HSTRING* value);
                    [propget] HRESULT ActivityId([out] [retval] GUID* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageRuntimeManager)]
                [uuid(6BF0FD29-6C2A-58D1-AF0C-ABD2EAC45E29)]
                interface IPackageRuntimeManager : IInspectable
                {
                    [overload("AddPackageSet")] HRESULT AddPackageSet([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    [overload("AddPackageSet")] HRESULT AddPackageSetWithOptions([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions* createOptions, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions* addOptions, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    HRESULT RemovePackageSet([in] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition* packageSetRuntimeDisposition);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageRuntimeManager)]
                [uuid(790947DE-01D4-5858-AA69-9C9390FB7D3E)]
                interface IPackageRuntimeManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Management.Deployment.PackageRuntimeManager** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSet)]
                [uuid(229FDF93-8529-5F8D-988C-AF8A39AD46F7)]
                interface IPackageSet : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PackageUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT PackageUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItem*>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetItem)]
                [uuid(8F254E15-C371-550F-B4E8-3F0BB1AE375F)]
                interface IPackageSetItem : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PackageFamilyName([out] [retval] HSTRING* value);
                    [propput] HRESULT PackageFamilyName([in] HSTRING value);
                    [propget] HRESULT MinVersion([out] [retval] Windows.ApplicationModel.PackageVersion* value);
                    [propput] HRESULT MinVersion([in] Windows.ApplicationModel.PackageVersion value);
                    [propget] HRESULT ProcessorArchitectureFilter([out] [retval] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures* value);
                    [propput] HRESULT ProcessorArchitectureFilter([in] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures value);
                    [propget] HRESULT PackageUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT PackageUri([in] Windows.Foundation.Uri* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition)]
                [uuid(7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD)]
                interface IPackageSetItemRuntimeDisposition : IInspectable
                {
                    [propget] HRESULT PackageSetItemId([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageFullName([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageDependencyId([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageDependencyContextId([out] [retval] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition)]
                [uuid(C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71)]
                interface IPackageSetRuntimeDisposition : IInspectable
                {
                    [propget] HRESULT PackageSetId([out] [retval] HSTRING* value);
                    [propput] HRESULT PackageSetId([in] HSTRING value);
                    [propget] HRESULT PackageSetItemRuntimeDispositions([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageVolume)]
                [uuid(9C9710F4-795A-58B3-93F4-C991C4329C49)]
                interface IPackageVolume : IInspectable
                {
                    [propget] HRESULT IsSystemVolume([out] [retval] boolean* value);
                    [propget] HRESULT MountPoint([out] [retval] HSTRING* value);
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageStorePath([out] [retval] HSTRING* value);
                    [propget] HRESULT SupportsHardLinks([out] [retval] boolean* value);
                    [propget] HRESULT IsFullTrustPackageSupported([out] [retval] boolean* value);
                    [propget] HRESULT IsAppxInstallSupported([out] [retval] boolean* value);
                    HRESULT IsRepairNeeded([out] [retval] boolean* result);
                    HRESULT Repair();
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageVolume)]
                [uuid(4C731835-8BC0-5313-9B56-8A4100EAEA01)]
                interface IPackageVolumeStatics : IInspectable
                {
                    HRESULT FindPackageVolumes([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageVolume*>** result);
                    HRESULT FindPackageVolumeByPath([in] HSTRING packageStorePath, [out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** result);
                    HRESULT FindPackageVolumeByName([in] HSTRING name, [out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.ProvisionPackageOptions)]
                [uuid(415E300F-D1E3-581E-A114-76D277B06136)]
                interface IProvisionPackageOptions : IInspectable
                {
                    [propget] HRESULT IsOptionalPackageFamilyNamesSupported([out] [retval] boolean* value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT IsProjectionOrderPackageFamilyNamesSupported([out] [retval] boolean* value);
                    [propget] HRESULT ProjectionOrderPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.RegisterPackageOptions)]
                [uuid(83068623-2046-505F-8425-55226C0F84CC)]
                interface IRegisterPackageOptions : IInspectable
                {
                    [propget] HRESULT AppDataVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT AppDataVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceAppShutdown([in] boolean value);
                    [propget] HRESULT ForceTargetAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceTargetAppShutdown([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT DeferRegistrationWhenPackagesAreInUse([out] [retval] boolean* value);
                    [propput] HRESULT DeferRegistrationWhenPackagesAreInUse([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.RemovePackageOptions)]
                [uuid(E7C90595-9A44-5046-8EBF-41ED326B200E)]
                interface IRemovePackageOptions : IInspectable
                {
                    [propget] HRESULT FailIfNotFound([out] [retval] boolean* value);
                    [propput] HRESULT FailIfNotFound([in] boolean value);
                    [propget] HRESULT PreserveApplicationData([out] [retval] boolean* value);
                    [propput] HRESULT PreserveApplicationData([in] boolean value);
                    [propget] HRESULT PreserveRoamableApplicationData([out] [retval] boolean* value);
                    [propput] HRESULT PreserveRoamableApplicationData([in] boolean value);
                    [propget] HRESULT RemoveForAllUsers([out] [retval] boolean* value);
                    [propput] HRESULT RemoveForAllUsers([in] boolean value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.StagePackageOptions)]
                [uuid(9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E)]
                interface IStagePackageOptions : IInspectable
                {
                    [propget] HRESULT TargetVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT TargetVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT OptionalPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT RelatedPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT StubPackageOption([out] [retval] Microsoft.Windows.Management.Deployment.StubPackageOption* value);
                    [propput] HRESULT StubPackageOption([in] Microsoft.Windows.Management.Deployment.StubPackageOption value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT RequiredContentGroupOnly([out] [retval] boolean* value);
                    [propput] HRESULT RequiredContentGroupOnly([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AddPackageOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IAddPackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass EnsureReadyOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IEnsureReadyOptions;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageDeploymentManager
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManager;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass PackageDeploymentResult
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageDeploymentResult;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageRuntimeManager
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageRuntimeManager;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSet
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageSet;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetItem
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageSetItem;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetItemRuntimeDisposition
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetRuntimeDisposition
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageVolumeStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageVolume
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IPackageVolume;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ProvisionPackageOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IProvisionPackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RegisterPackageOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IRegisterPackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RemovePackageOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IRemovePackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass StagePackageOptions
                {
                    [default] interface Microsoft.Windows.Management.Deployment.IStagePackageOptions;
                }
            }
        }
    }
}
