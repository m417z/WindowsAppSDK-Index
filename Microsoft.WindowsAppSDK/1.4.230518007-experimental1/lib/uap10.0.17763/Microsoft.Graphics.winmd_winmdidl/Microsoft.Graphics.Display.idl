//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.UI.idl";
import "Microsoft.UI.Dispatching.idl";
import "Windows.Storage.Streams.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract WindowsAppSDKContract;
    }
}
namespace Microsoft
{
    namespace Graphics
    {
        namespace Display
        {
            typedef enum DisplayAdvancedColorKind DisplayAdvancedColorKind;

            typedef enum DisplayHdrMetadataFormat DisplayHdrMetadataFormat;

            typedef enum DisplayOrientation DisplayOrientation;

            interface IDisplayAdvancedColorInfo;

            interface IDisplayInformation;

            interface IDisplayInformation2;

            interface IDisplayInformationStatics;

            runtimeclass DisplayAdvancedColorInfo;

            runtimeclass DisplayInformation;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Graphics
    {
        namespace Display
        {
            declare
            {
                interface Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Graphics
    {
        namespace Display
        {
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            enum DisplayAdvancedColorKind
            {
                StandardDynamicRange = 0,
                WideColorGamut       = 1,
                HighDynamicRange     = 2
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            enum DisplayHdrMetadataFormat
            {
                Hdr10     = 0,
                Hdr10Plus = 1
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.4)]
            [experimental]
            enum DisplayOrientation
            {
                RotateNone       = 0,
                Rotate90Degrees  = 90,
                Rotate180Degrees = 180,
                Rotate270Degrees = 270
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.Graphics.Display.DisplayAdvancedColorInfo)]
            [uuid(B44F0F47-7065-5175-BA3E-714489C85A3E)]
            interface IDisplayAdvancedColorInfo : IInspectable
            {
                [propget] HRESULT CurrentAdvancedColorKind([out] [retval] Microsoft.Graphics.Display.DisplayAdvancedColorKind* value);
                [propget] HRESULT RedPrimary([out] [retval] Windows.Foundation.Point* value);
                [propget] HRESULT GreenPrimary([out] [retval] Windows.Foundation.Point* value);
                [propget] HRESULT BluePrimary([out] [retval] Windows.Foundation.Point* value);
                [propget] HRESULT WhitePoint([out] [retval] Windows.Foundation.Point* value);
                [propget] HRESULT MaxLuminanceInNits([out] [retval] DOUBLE* value);
                [propget] HRESULT MinLuminanceInNits([out] [retval] DOUBLE* value);
                [propget] HRESULT MaxAverageFullFrameLuminanceInNits([out] [retval] DOUBLE* value);
                [propget] HRESULT SdrWhiteLevelInNits([out] [retval] DOUBLE* value);
                HRESULT IsHdrMetadataFormatCurrentlySupported([in] Microsoft.Graphics.Display.DisplayHdrMetadataFormat format, [out] [retval] boolean* result);
                HRESULT IsAdvancedColorKindAvailable([in] Microsoft.Graphics.Display.DisplayAdvancedColorKind kind, [out] [retval] boolean* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.Graphics.Display.DisplayInformation)]
            [uuid(F0D58D4F-84CE-5B27-B222-4F8F7DC0AAEB)]
            interface IDisplayInformation : IInspectable
            {
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                [propget] HRESULT IsStereoEnabled([out] [retval] boolean* value);
                [eventadd] HRESULT IsStereoEnabledChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT IsStereoEnabledChanged([in] EventRegistrationToken token);
                HRESULT GetColorProfileAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>** operation);
                HRESULT GetColorProfile([out] [retval] Windows.Storage.Streams.IRandomAccessStream** result);
                [eventadd] HRESULT ColorProfileChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ColorProfileChanged([in] EventRegistrationToken token);
                HRESULT GetAdvancedColorInfo([out] [retval] Microsoft.Graphics.Display.DisplayAdvancedColorInfo** result);
                [eventadd] HRESULT AdvancedColorInfoChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AdvancedColorInfoChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT Destroyed([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Destroyed([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.4)]
            [exclusiveto(Microsoft.Graphics.Display.DisplayInformation)]
            [experimental]
            [uuid(5586D03C-B4B6-594E-96AD-8372700B08DD)]
            interface IDisplayInformation2 : IInspectable
            {
                [propget] HRESULT RawDpi([out] [retval] Windows.Foundation.IReference<Windows.Foundation.Point>** value);
                [propget] HRESULT RawPixelsPerViewPixel([out] [retval] DOUBLE* value);
                [eventadd] HRESULT DpiChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DpiChanged([in] EventRegistrationToken token);
                [propget] HRESULT AngularOffsetFromNativeOrientation([out] [retval] Microsoft.Graphics.Display.DisplayOrientation* value);
                [eventadd] HRESULT OrientationChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT OrientationChanged([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.Graphics.Display.DisplayInformation)]
            [uuid(2DE85048-37FA-56C0-AC30-47E2044D7EA8)]
            interface IDisplayInformationStatics : IInspectable
            {
                HRESULT CreateForWindowId([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.Graphics.Display.DisplayInformation** result);
                HRESULT CreateForDisplayId([in] Microsoft.UI.DisplayId displayId, [out] [retval] Microsoft.Graphics.Display.DisplayInformation** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [marshaling_behavior(agile)]
            runtimeclass DisplayAdvancedColorInfo
            {
                [default] interface Microsoft.Graphics.Display.IDisplayAdvancedColorInfo;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [marshaling_behavior(agile)]
            [static(Microsoft.Graphics.Display.IDisplayInformationStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass DisplayInformation
            {
                [default] interface Microsoft.Graphics.Display.IDisplayInformation;
                [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.4)] [experimental] interface Microsoft.Graphics.Display.IDisplayInformation2;
                interface Windows.Foundation.IClosable;
            }
        }
    }
}
