//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.UI.idl";
import "Windows.Graphics.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract WindowsAppSDKContract;
    }
}
namespace Microsoft
{
    namespace UI
    {
        typedef struct DisplayId DisplayId;

        typedef struct IconId IconId;

        typedef struct WindowId WindowId;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Windowing
        {
            typedef enum AppWindowPresenterKind AppWindowPresenterKind;

            typedef enum CompactOverlaySize CompactOverlaySize;

            typedef enum DisplayAreaFallback DisplayAreaFallback;

            typedef enum DisplayAreaWatcherStatus DisplayAreaWatcherStatus;

            typedef enum IconShowOptions IconShowOptions;

            typedef enum OverlappedPresenterState OverlappedPresenterState;

            typedef enum TitleBarHeightOption TitleBarHeightOption;

            interface IAppWindow;

            interface IAppWindow2;

            interface IAppWindowChangedEventArgs;

            interface IAppWindowChangedEventArgs2;

            interface IAppWindowClosingEventArgs;

            interface IAppWindowPresenter;

            interface IAppWindowPresenterFactory;

            interface IAppWindowStatics;

            interface IAppWindowTitleBar;

            interface IAppWindowTitleBar2;

            interface IAppWindowTitleBarStatics;

            interface ICompactOverlayPresenter;

            interface ICompactOverlayPresenterStatics;

            interface IDisplayArea;

            interface IDisplayAreaStatics;

            interface IDisplayAreaWatcher;

            interface IFullScreenPresenter;

            interface IFullScreenPresenterStatics;

            interface IOverlappedPresenter;

            interface IOverlappedPresenter2;

            interface IOverlappedPresenterStatics;

            interface IOverlappedPresenterStatics2;

            runtimeclass AppWindow;

            runtimeclass AppWindowChangedEventArgs;

            runtimeclass AppWindowClosingEventArgs;

            runtimeclass AppWindowPresenter;

            runtimeclass AppWindowTitleBar;

            runtimeclass CompactOverlayPresenter;

            runtimeclass DisplayArea;

            runtimeclass DisplayAreaWatcher;

            runtimeclass FullScreenPresenter;

            runtimeclass OverlappedPresenter;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Windowing
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Windowing.DisplayArea*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Windowing.DisplayArea*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Windowing.DisplayArea*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, Microsoft.UI.Windowing.AppWindowChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, Microsoft.UI.Windowing.AppWindowClosingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, Microsoft.UI.Windowing.DisplayArea*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Windowing
        {
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum AppWindowPresenterKind
            {
                Default        = 0,
                CompactOverlay = 1,
                FullScreen     = 2,
                Overlapped     = 3
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum CompactOverlaySize
            {
                Small  = 0,
                Medium = 1,
                Large  = 2
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum DisplayAreaFallback
            {
                None    = 0,
                Primary = 1,
                Nearest = 2
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum DisplayAreaWatcherStatus
            {
                Created              = 0,
                Started              = 1,
                EnumerationCompleted = 2,
                Stopping             = 3,
                Stopped              = 4,
                Aborted              = 5
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum IconShowOptions
            {
                ShowIconAndSystemMenu = 0,
                HideIconAndSystemMenu = 1
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            enum OverlappedPresenterState
            {
                Maximized = 0,
                Minimized = 1,
                Restored  = 2
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            enum TitleBarHeightOption
            {
                Standard = 0,
                Tall     = 1
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindow)]
            [uuid(CFA788B3-643B-5C5E-AD4E-321D48A82ACD)]
            interface IAppWindow : IInspectable
            {
                [propget] HRESULT Id([out] [retval] Microsoft.UI.WindowId* value);
                [propget] HRESULT IsShownInSwitchers([out] [retval] boolean* value);
                [propput] HRESULT IsShownInSwitchers([in] boolean value);
                [propget] HRESULT IsVisible([out] [retval] boolean* value);
                [propget] HRESULT OwnerWindowId([out] [retval] Microsoft.UI.WindowId* value);
                [propget] HRESULT Position([out] [retval] Windows.Graphics.PointInt32* value);
                [propget] HRESULT Presenter([out] [retval] Microsoft.UI.Windowing.AppWindowPresenter** value);
                [propget] HRESULT Size([out] [retval] Windows.Graphics.SizeInt32* value);
                [propget] HRESULT Title([out] [retval] HSTRING* value);
                [propput] HRESULT Title([in] HSTRING value);
                [propget] HRESULT TitleBar([out] [retval] Microsoft.UI.Windowing.AppWindowTitleBar** value);
                HRESULT Destroy();
                HRESULT Hide();
                HRESULT Move([in] Windows.Graphics.PointInt32 position);
                [overload("MoveAndResize")] HRESULT MoveAndResize([in] Windows.Graphics.RectInt32 rect);
                [overload("MoveAndResize")] HRESULT MoveAndResizeRelativeToDisplayArea([in] Windows.Graphics.RectInt32 rect, [in] Microsoft.UI.Windowing.DisplayArea* displayarea);
                HRESULT Resize([in] Windows.Graphics.SizeInt32 size);
                [default_overload] [overload("SetIcon")] HRESULT SetIcon([in] HSTRING iconPath);
                [overload("SetIcon")] HRESULT SetIconWithIconId([in] Microsoft.UI.IconId iconId);
                [default_overload] [overload("SetPresenter")] HRESULT SetPresenter([in] Microsoft.UI.Windowing.AppWindowPresenter* appWindowPresenter);
                [overload("SetPresenter")] HRESULT SetPresenterByKind([in] Microsoft.UI.Windowing.AppWindowPresenterKind appWindowPresenterKind);
                [overload("Show")] HRESULT Show();
                [overload("Show")] HRESULT ShowWithActivation([in] boolean activateWindow);
                [eventadd] HRESULT Changed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, Microsoft.UI.Windowing.AppWindowChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Changed([in] EventRegistrationToken token);
                [eventadd] HRESULT Closing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, Microsoft.UI.Windowing.AppWindowClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closing([in] EventRegistrationToken token);
                [eventadd] HRESULT Destroying([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Destroying([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindow)]
            [uuid(6CD41292-794C-5CAC-8961-210D012C6EBC)]
            interface IAppWindow2 : IInspectable
            {
                [propget] HRESULT ClientSize([out] [retval] Windows.Graphics.SizeInt32* value);
                HRESULT MoveInZOrderAtBottom();
                HRESULT MoveInZOrderAtTop();
                HRESULT MoveInZOrderBelow([in] Microsoft.UI.WindowId windowId);
                HRESULT ResizeClient([in] Windows.Graphics.SizeInt32 size);
                HRESULT ShowOnceWithRequestedStartupState();
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowChangedEventArgs)]
            [uuid(2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D)]
            interface IAppWindowChangedEventArgs : IInspectable
            {
                [propget] HRESULT DidPositionChange([out] [retval] boolean* value);
                [propget] HRESULT DidPresenterChange([out] [retval] boolean* value);
                [propget] HRESULT DidSizeChange([out] [retval] boolean* value);
                [propget] HRESULT DidVisibilityChange([out] [retval] boolean* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowChangedEventArgs)]
            [uuid(A773AB4C-A5EC-50E8-98AC-247FE6CD4227)]
            interface IAppWindowChangedEventArgs2 : IInspectable
            {
                [propget] HRESULT DidZOrderChange([out] [retval] boolean* value);
                [propget] HRESULT IsZOrderAtBottom([out] [retval] boolean* value);
                [propget] HRESULT IsZOrderAtTop([out] [retval] boolean* value);
                [propget] HRESULT ZOrderBelowWindowId([out] [retval] Microsoft.UI.WindowId* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowClosingEventArgs)]
            [uuid(0E09D90B-2261-590B-9AD1-8504991D8754)]
            interface IAppWindowClosingEventArgs : IInspectable
            {
                [propget] HRESULT Cancel([out] [retval] boolean* value);
                [propput] HRESULT Cancel([in] boolean value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowPresenter)]
            [uuid(BC3042C2-C6C6-5632-8989-FF0EC6D3B40D)]
            interface IAppWindowPresenter : IInspectable
            {
                [propget] HRESULT Kind([out] [retval] Microsoft.UI.Windowing.AppWindowPresenterKind* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowPresenter)]
            [uuid(62082E3C-1368-5238-90D1-E932DC718A82)]
            interface IAppWindowPresenterFactory : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindow)]
            [uuid(3C315C24-D540-5D72-B518-B226B83627CB)]
            interface IAppWindowStatics : IInspectable
            {
                [overload("Create")] HRESULT Create([out] [retval] Microsoft.UI.Windowing.AppWindow** result);
                [overload("Create")] HRESULT CreateWithPresenter([in] Microsoft.UI.Windowing.AppWindowPresenter* appWindowPresenter, [out] [retval] Microsoft.UI.Windowing.AppWindow** result);
                [overload("Create")] HRESULT CreateWithPresenterAndOwner([in] Microsoft.UI.Windowing.AppWindowPresenter* appWindowPresenter, [in] Microsoft.UI.WindowId ownerWindowId, [out] [retval] Microsoft.UI.Windowing.AppWindow** result);
                HRESULT GetFromWindowId([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.UI.Windowing.AppWindow** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowTitleBar)]
            [uuid(5574EFA2-C91C-5700-A363-539C71A7AAF4)]
            interface IAppWindowTitleBar : IInspectable
            {
                [propget] HRESULT BackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonHoverBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonHoverBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonHoverForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonHoverForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonInactiveBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonInactiveBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonInactiveForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonInactiveForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonPressedBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonPressedBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonPressedForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonPressedForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ExtendsContentIntoTitleBar([out] [retval] boolean* value);
                [propput] HRESULT ExtendsContentIntoTitleBar([in] boolean value);
                [propget] HRESULT ForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT Height([out] [retval] INT32* value);
                [propget] HRESULT IconShowOptions([out] [retval] Microsoft.UI.Windowing.IconShowOptions* value);
                [propput] HRESULT IconShowOptions([in] Microsoft.UI.Windowing.IconShowOptions value);
                [propget] HRESULT InactiveBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT InactiveBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT InactiveForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT InactiveForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT LeftInset([out] [retval] INT32* value);
                [propget] HRESULT RightInset([out] [retval] INT32* value);
                HRESULT ResetToDefault();
                HRESULT SetDragRectangles([in] UINT32 __valueSize, [in] [size_is(__valueSize)] Windows.Graphics.RectInt32* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowTitleBar)]
            [uuid(86FAED38-748A-5B4B-9CCF-3BA0496C9041)]
            interface IAppWindowTitleBar2 : IInspectable
            {
                [propget] HRESULT PreferredHeightOption([out] [retval] Microsoft.UI.Windowing.TitleBarHeightOption* value);
                [propput] HRESULT PreferredHeightOption([in] Microsoft.UI.Windowing.TitleBarHeightOption value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.AppWindowTitleBar)]
            [uuid(9E1DA52E-8B15-54D6-A886-F7B9F9D930B2)]
            interface IAppWindowTitleBarStatics : IInspectable
            {
                HRESULT IsCustomizationSupported([out] [retval] boolean* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.CompactOverlayPresenter)]
            [uuid(EFEB0812-6FC7-5B7D-BD92-CC8F9A6454C9)]
            interface ICompactOverlayPresenter : IInspectable
            {
                [propget] HRESULT InitialSize([out] [retval] Microsoft.UI.Windowing.CompactOverlaySize* value);
                [propput] HRESULT InitialSize([in] Microsoft.UI.Windowing.CompactOverlaySize value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.CompactOverlayPresenter)]
            [uuid(EAB93186-4F6A-52F9-8C03-DA57A1522F6E)]
            interface ICompactOverlayPresenterStatics : IInspectable
            {
                HRESULT Create([out] [retval] Microsoft.UI.Windowing.CompactOverlayPresenter** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.DisplayArea)]
            [uuid(5C7E0537-B621-5579-BCAE-A84AA8746167)]
            interface IDisplayArea : IInspectable
            {
                [propget] HRESULT DisplayId([out] [retval] Microsoft.UI.DisplayId* value);
                [propget] HRESULT IsPrimary([out] [retval] boolean* value);
                [propget] HRESULT OuterBounds([out] [retval] Windows.Graphics.RectInt32* value);
                [propget] HRESULT WorkArea([out] [retval] Windows.Graphics.RectInt32* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.DisplayArea)]
            [uuid(02AB4926-211E-5D49-8E4B-2AF193DAED09)]
            interface IDisplayAreaStatics : IInspectable
            {
                [propget] HRESULT Primary([out] [retval] Microsoft.UI.Windowing.DisplayArea** value);
                HRESULT CreateWatcher([out] [retval] Microsoft.UI.Windowing.DisplayAreaWatcher** result);
                HRESULT FindAll([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Windowing.DisplayArea*>** result);
                HRESULT GetFromWindowId([in] Microsoft.UI.WindowId windowId, [in] Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback, [out] [retval] Microsoft.UI.Windowing.DisplayArea** result);
                HRESULT GetFromPoint([in] Windows.Graphics.PointInt32 point, [in] Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback, [out] [retval] Microsoft.UI.Windowing.DisplayArea** result);
                HRESULT GetFromRect([in] Windows.Graphics.RectInt32 rect, [in] Microsoft.UI.Windowing.DisplayAreaFallback displayAreaFallback, [out] [retval] Microsoft.UI.Windowing.DisplayArea** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.DisplayAreaWatcher)]
            [uuid(83F6562F-D3A0-548B-8E4F-A99BE3D95C9C)]
            interface IDisplayAreaWatcher : IInspectable
            {
                [propget] HRESULT Status([out] [retval] Microsoft.UI.Windowing.DisplayAreaWatcherStatus* value);
                HRESULT Start();
                HRESULT Stop();
                [eventadd] HRESULT Added([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, Microsoft.UI.Windowing.DisplayArea*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Added([in] EventRegistrationToken token);
                [eventadd] HRESULT EnumerationCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT EnumerationCompleted([in] EventRegistrationToken token);
                [eventadd] HRESULT Removed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, Microsoft.UI.Windowing.DisplayArea*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Removed([in] EventRegistrationToken token);
                [eventadd] HRESULT Stopped([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Stopped([in] EventRegistrationToken token);
                [eventadd] HRESULT Updated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher*, Microsoft.UI.Windowing.DisplayArea*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Updated([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.FullScreenPresenter)]
            [uuid(FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593)]
            interface IFullScreenPresenter : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.FullScreenPresenter)]
            [uuid(2EC0D2C1-E086-55BB-A3B2-44942E231C67)]
            interface IFullScreenPresenterStatics : IInspectable
            {
                HRESULT Create([out] [retval] Microsoft.UI.Windowing.FullScreenPresenter** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.OverlappedPresenter)]
            [uuid(21693970-4F4C-5172-9E9D-682A2D174884)]
            interface IOverlappedPresenter : IInspectable
            {
                [propget] HRESULT HasBorder([out] [retval] boolean* value);
                [propget] HRESULT HasTitleBar([out] [retval] boolean* value);
                [propget] HRESULT IsAlwaysOnTop([out] [retval] boolean* value);
                [propput] HRESULT IsAlwaysOnTop([in] boolean value);
                [propget] HRESULT IsMaximizable([out] [retval] boolean* value);
                [propput] HRESULT IsMaximizable([in] boolean value);
                [propget] HRESULT IsMinimizable([out] [retval] boolean* value);
                [propput] HRESULT IsMinimizable([in] boolean value);
                [propget] HRESULT IsModal([out] [retval] boolean* value);
                [propput] HRESULT IsModal([in] boolean value);
                [propget] HRESULT IsResizable([out] [retval] boolean* value);
                [propput] HRESULT IsResizable([in] boolean value);
                [propget] HRESULT State([out] [retval] Microsoft.UI.Windowing.OverlappedPresenterState* value);
                HRESULT Maximize();
                HRESULT Minimize();
                HRESULT Restore();
                HRESULT SetBorderAndTitleBar([in] boolean hasBorder, [in] boolean hasTitleBar);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [exclusiveto(Microsoft.UI.Windowing.OverlappedPresenter)]
            [uuid(5C6CCD93-4244-5CD2-B355-ED5EA34DF730)]
            interface IOverlappedPresenter2 : IInspectable
            {
                [overload("Minimize")] HRESULT MinimizeWithActivation([in] boolean activateWindow);
                [overload("Restore")] HRESULT RestoreWithActivation([in] boolean activateWindow);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [exclusiveto(Microsoft.UI.Windowing.OverlappedPresenter)]
            [uuid(997225E4-7B00-5AEE-A4BE-D4068D1999E2)]
            interface IOverlappedPresenterStatics : IInspectable
            {
                HRESULT Create([out] [retval] Microsoft.UI.Windowing.OverlappedPresenter** result);
                HRESULT CreateForContextMenu([out] [retval] Microsoft.UI.Windowing.OverlappedPresenter** result);
                HRESULT CreateForDialog([out] [retval] Microsoft.UI.Windowing.OverlappedPresenter** result);
                HRESULT CreateForToolWindow([out] [retval] Microsoft.UI.Windowing.OverlappedPresenter** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [exclusiveto(Microsoft.UI.Windowing.OverlappedPresenter)]
            [uuid(ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39)]
            interface IOverlappedPresenterStatics2 : IInspectable
            {
                [propget] HRESULT RequestedStartupState([out] [retval] Microsoft.UI.Windowing.OverlappedPresenterState* value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.IAppWindowStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [threading(both)]
            runtimeclass AppWindow
            {
                [default] interface Microsoft.UI.Windowing.IAppWindow;
                [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)] interface Microsoft.UI.Windowing.IAppWindow2;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass AppWindowChangedEventArgs
            {
                [default] interface Microsoft.UI.Windowing.IAppWindowChangedEventArgs;
                [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)] interface Microsoft.UI.Windowing.IAppWindowChangedEventArgs2;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass AppWindowClosingEventArgs
            {
                [default] interface Microsoft.UI.Windowing.IAppWindowClosingEventArgs;
            }

            [composable(Microsoft.UI.Windowing.IAppWindowPresenterFactory, public, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass AppWindowPresenter
            {
                [default] interface Microsoft.UI.Windowing.IAppWindowPresenter;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.IAppWindowTitleBarStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [threading(both)]
            runtimeclass AppWindowTitleBar
            {
                [default] interface Microsoft.UI.Windowing.IAppWindowTitleBar;
                [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)] interface Microsoft.UI.Windowing.IAppWindowTitleBar2;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.ICompactOverlayPresenterStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [threading(both)]
            runtimeclass CompactOverlayPresenter : Microsoft.UI.Windowing.AppWindowPresenter
            {
                [default] interface Microsoft.UI.Windowing.ICompactOverlayPresenter;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.IDisplayAreaStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [threading(both)]
            runtimeclass DisplayArea
            {
                [default] interface Microsoft.UI.Windowing.IDisplayArea;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DisplayAreaWatcher
            {
                [default] interface Microsoft.UI.Windowing.IDisplayAreaWatcher;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.IFullScreenPresenterStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [threading(both)]
            runtimeclass FullScreenPresenter : Microsoft.UI.Windowing.AppWindowPresenter
            {
                [default] interface Microsoft.UI.Windowing.IFullScreenPresenter;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Windowing.IOverlappedPresenterStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.0)]
            [static(Microsoft.UI.Windowing.IOverlappedPresenterStatics2, Microsoft.Foundation.WindowsAppSDKContract, 1.1)]
            [threading(both)]
            runtimeclass OverlappedPresenter : Microsoft.UI.Windowing.AppWindowPresenter
            {
                [default] interface Microsoft.UI.Windowing.IOverlappedPresenter;
                [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.1)] interface Microsoft.UI.Windowing.IOverlappedPresenter2;
            }
        }
    }
}
