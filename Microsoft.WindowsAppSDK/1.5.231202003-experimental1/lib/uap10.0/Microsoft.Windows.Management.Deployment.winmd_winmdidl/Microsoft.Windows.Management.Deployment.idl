//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Windows.ApplicationModel.DynamicDependency.idl";
import "Windows.ApplicationModel.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace ApplicationModel
        {
            namespace DynamicDependency
            {
                runtimeclass AddPackageDependencyOptions;

                runtimeclass CreatePackageDependencyOptions;

                typedef struct PackageDependencyContextId PackageDependencyContextId;

                typedef enum PackageDependencyProcessorArchitectures PackageDependencyProcessorArchitectures;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        typedef struct PackageVersion PackageVersion;
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Uri;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                apicontract PackageDeploymentContract;

                typedef enum DeploymentPriority DeploymentPriority;

                typedef enum DeploymentProcessingModel DeploymentProcessingModel;

                typedef enum PackageDeploymentProgressStatus PackageDeploymentProgressStatus;

                typedef enum PackageDeploymentStatus PackageDeploymentStatus;

                typedef enum StubPackageOption StubPackageOption;

                interface IAddPackageOptions;

                interface IAddPackageSetOptions;

                interface IEnsureIsReadyOptions;

                interface IFindPackageSetOptions;

                interface IPackageDeploymentManager;

                interface IPackageDeploymentManagerStatics;

                interface IPackageDeploymentProgress;

                interface IPackageDeploymentResult;

                interface IPackageRuntimeManager;

                interface IPackageRuntimeManagerStatics;

                interface IPackageSet;

                interface IPackageSetItem;

                interface IPackageSetItemRuntimeDisposition;

                interface IPackageSetManager;

                interface IPackageSetManagerStatics;

                interface IPackageSetRuntimeDisposition;

                interface IPackageVolume;

                interface IPackageVolumeManagerStatics;

                interface IPackageVolumeStatus;

                interface IRegisterPackageOptions;

                interface IRemovePackageOptions;

                interface IStagePackageOptions;

                runtimeclass AddPackageOptions;

                runtimeclass AddPackageSetOptions;

                runtimeclass EnsureIsReadyOptions;

                runtimeclass FindPackageSetOptions;

                runtimeclass PackageDeploymentManager;

                runtimeclass PackageDeploymentProgress;

                runtimeclass PackageDeploymentResult;

                runtimeclass PackageRuntimeManager;

                runtimeclass PackageSet;

                runtimeclass PackageSetItem;

                runtimeclass PackageSetItemRuntimeDisposition;

                runtimeclass PackageSetManager;

                runtimeclass PackageSetRuntimeDisposition;

                runtimeclass PackageVolume;

                runtimeclass PackageVolumeManager;

                runtimeclass PackageVolumeStatus;

                runtimeclass RegisterPackageOptions;

                runtimeclass RemovePackageOptions;

                runtimeclass StagePackageOptions;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageSet*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageSet*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageSet*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSet*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItem*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageVolume*>;

                    interface Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Management
        {
            namespace Deployment
            {
                [contractversion(1.0)]
                [experimental]
                apicontract PackageDeploymentContract
                {
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                enum DeploymentPriority
                {
                    Low       = 0,
                    Normal    = 1,
                    Immediate = 2
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                enum DeploymentProcessingModel
                {
                    Sequential = 0,
                    Parallel   = 1
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                enum PackageDeploymentProgressStatus
                {
                    Queued           = 0,
                    InProgress       = 1,
                    CompletedSuccess = 2,
                    CompletedFailure = 3
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                enum PackageDeploymentStatus
                {
                    InProgress       = 0,
                    CompletedSuccess = 1,
                    CompletedFailure = 2
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                enum StubPackageOption
                {
                    Default       = 0,
                    InstallFull   = 1,
                    InstallStub   = 2,
                    UsePreference = 3
                };

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.AddPackageOptions)]
                [experimental]
                [uuid(E3DB7F39-F9D0-5884-BDEF-6153B54574A3)]
                interface IAddPackageOptions : IInspectable
                {
                    [propget] HRESULT TargetVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT TargetVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT OptionalPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT RelatedPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT StubPackageOption([out] [retval] Microsoft.Windows.Management.Deployment.StubPackageOption* value);
                    [propput] HRESULT StubPackageOption([in] Microsoft.Windows.Management.Deployment.StubPackageOption value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceAppShutdown([in] boolean value);
                    [propget] HRESULT ForceTargetAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceTargetAppShutdown([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT RequiredContentGroupOnly([out] [retval] boolean* value);
                    [propput] HRESULT RequiredContentGroupOnly([in] boolean value);
                    [propget] HRESULT RetainFilesOnFailure([out] [retval] boolean* value);
                    [propput] HRESULT RetainFilesOnFailure([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT DeferRegistrationWhenPackagesAreInUse([out] [retval] boolean* value);
                    [propput] HRESULT DeferRegistrationWhenPackagesAreInUse([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                    [propget] HRESULT IsLimitToExistingPackagesSupported([out] [retval] boolean* value);
                    [propget] HRESULT LimitToExistingPackages([out] [retval] boolean* value);
                    [propput] HRESULT LimitToExistingPackages([in] boolean value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.AddPackageSetOptions)]
                [experimental]
                [uuid(9A587B75-FEC6-5DB6-AEAF-CE9B22D3C192)]
                interface IAddPackageSetOptions : IInspectable
                {
                    [propget] HRESULT DeploymentProcessingModel([out] [retval] Microsoft.Windows.Management.Deployment.DeploymentProcessingModel* value);
                    [propput] HRESULT DeploymentProcessingModel([in] Microsoft.Windows.Management.Deployment.DeploymentProcessingModel value);
                    [propget] HRESULT DeploymentPriority([out] [retval] Microsoft.Windows.Management.Deployment.DeploymentPriority* value);
                    [propput] HRESULT DeploymentPriority([in] Microsoft.Windows.Management.Deployment.DeploymentPriority value);
                    [propget] HRESULT AddPackageOptions([out] [retval] Microsoft.Windows.Management.Deployment.AddPackageOptions** value);
                    [propput] HRESULT AddPackageOptions([in] Microsoft.Windows.Management.Deployment.AddPackageOptions* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.EnsureIsReadyOptions)]
                [experimental]
                [uuid(6E8EFB66-941C-5844-B507-561897BBD152)]
                interface IEnsureIsReadyOptions : IInspectable
                {
                    [propget] HRESULT DeploymentProcessingModel([out] [retval] Microsoft.Windows.Management.Deployment.DeploymentProcessingModel* value);
                    [propput] HRESULT DeploymentProcessingModel([in] Microsoft.Windows.Management.Deployment.DeploymentProcessingModel value);
                    [propget] HRESULT DeploymentPriority([out] [retval] Microsoft.Windows.Management.Deployment.DeploymentPriority* value);
                    [propput] HRESULT DeploymentPriority([in] Microsoft.Windows.Management.Deployment.DeploymentPriority value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.FindPackageSetOptions)]
                [experimental]
                [uuid(3A93E131-3CA0-532A-8B20-296A8F66A1B8)]
                interface IFindPackageSetOptions : IInspectable
                {
                    [propget] HRESULT TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder([out] [retval] boolean* value);
                    [propput] HRESULT TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder([in] boolean value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentManager)]
                [experimental]
                [uuid(240C3064-2CCD-53D0-B1DF-ED4F1460919B)]
                interface IPackageDeploymentManager : IInspectable
                {
                    HRESULT IsPackageSetReady([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] boolean* result);
                    HRESULT IsPackageSetReadyById([in] HSTRING packageSetId, [out] [retval] boolean* result);
                    HRESULT EnsurePackageSetIsReadyAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.EnsureIsReadyOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT EnsurePackageSetIsReadyByIdAsync([in] HSTRING packageSetId, [in] Microsoft.Windows.Management.Deployment.EnsureIsReadyOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT AddPackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.AddPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT AddPackageByUriAsync([in] Windows.Foundation.Uri* packageUri, [in] Microsoft.Windows.Management.Deployment.AddPackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT AddPackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.AddPackageSetOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT AddPackageSetByIdAsync([in] HSTRING packageSetId, [in] Microsoft.Windows.Management.Deployment.AddPackageSetOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT RemovePackageAsync([in] HSTRING package, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT RemovePackageByFullNameAsync([in] HSTRING packageFullName, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT RemovePackageByFamilyNameAsync([in] HSTRING packageFamilyName, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT RemovePackageSetAsync([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                    HRESULT RemovePackageSetByIdAsync([in] HSTRING packageSetId, [in] Microsoft.Windows.Management.Deployment.RemovePackageOptions* options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.Management.Deployment.PackageDeploymentResult*, Microsoft.Windows.Management.Deployment.PackageDeploymentProgress*>** operation);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentManager)]
                [experimental]
                [uuid(DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2)]
                interface IPackageDeploymentManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Management.Deployment.PackageDeploymentManager** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentProgress)]
                [experimental]
                [uuid(51DD9FEA-9C5F-51C9-98CB-BA99C71A3B26)]
                interface IPackageDeploymentProgress : IInspectable
                {
                    [propget] HRESULT status([out] [retval] Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus* value);
                    [propput] HRESULT status([in] Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus value);
                    [propget] HRESULT percentage([out] [retval] DOUBLE* value);
                    [propput] HRESULT percentage([in] DOUBLE value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageDeploymentResult)]
                [experimental]
                [uuid(27F64C57-A16A-576F-B8EF-B39C28DF2A04)]
                interface IPackageDeploymentResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.Management.Deployment.PackageDeploymentStatus* value);
                    [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
                    [propget] HRESULT IsRegistered([out] [retval] boolean* value);
                    [propget] HRESULT ActivityId([out] [retval] GUID* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageRuntimeManager)]
                [experimental]
                [uuid(6E78A586-0511-5C87-B6E1-F78096C2E5CF)]
                interface IPackageRuntimeManager : IInspectable
                {
                    [overload("AddPackageSet")] HRESULT AddPackageSet([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    [overload("AddPackageSet")] HRESULT AddPackageSetWithOptions([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions* createOptions, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions* addOptions, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    [overload("AddPackageSetById")] HRESULT AddPackageSetById([in] HSTRING packageSetId, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    [overload("AddPackageSetById")] HRESULT AddPackageSetByIdWithOptions([in] HSTRING packageSetId, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions* createOptions, [in] Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions* addOptions, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition** result);
                    HRESULT RemovePackageSet([in] Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition* packageSetRuntimeDisposition);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageRuntimeManager)]
                [experimental]
                [uuid(790947DE-01D4-5858-AA69-9C9390FB7D3E)]
                interface IPackageRuntimeManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Management.Deployment.PackageRuntimeManager** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSet)]
                [experimental]
                [uuid(D48A09B0-FD90-5229-9D4C-0AE534BF853C)]
                interface IPackageSet : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PackageSetItems([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItem*>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetItem)]
                [experimental]
                [uuid(8F254E15-C371-550F-B4E8-3F0BB1AE375F)]
                interface IPackageSetItem : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propput] HRESULT Id([in] HSTRING value);
                    [propget] HRESULT PackageFamilyName([out] [retval] HSTRING* value);
                    [propput] HRESULT PackageFamilyName([in] HSTRING value);
                    [propget] HRESULT MinVersion([out] [retval] Windows.ApplicationModel.PackageVersion* value);
                    [propput] HRESULT MinVersion([in] Windows.ApplicationModel.PackageVersion value);
                    [propget] HRESULT ProcessorArchitectureFilter([out] [retval] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures* value);
                    [propput] HRESULT ProcessorArchitectureFilter([in] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures value);
                    [propget] HRESULT PackageUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT PackageUri([in] Windows.Foundation.Uri* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition)]
                [experimental]
                [uuid(7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD)]
                interface IPackageSetItemRuntimeDisposition : IInspectable
                {
                    [propget] HRESULT PackageSetItemId([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageFullName([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageDependencyId([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageDependencyContextId([out] [retval] Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId* value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetManager)]
                [experimental]
                [uuid(1BEAC17A-3256-5330-BC0A-84F449623366)]
                interface IPackageSetManager : IInspectable
                {
                    HRESULT Add([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet);
                    HRESULT Update([in] Microsoft.Windows.Management.Deployment.PackageSet* packageSet);
                    HRESULT Remove([in] HSTRING packageSetId);
                    HRESULT Get([in] HSTRING packageSetId, [out] [retval] Microsoft.Windows.Management.Deployment.PackageSet** result);
                    HRESULT Find([in] Microsoft.Windows.Management.Deployment.FindPackageSetOptions* options, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSet*>** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetManager)]
                [experimental]
                [uuid(C7D4582A-E262-5824-8339-5AD8352ED74B)]
                interface IPackageSetManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Management.Deployment.PackageSetManager** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition)]
                [experimental]
                [uuid(C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71)]
                interface IPackageSetRuntimeDisposition : IInspectable
                {
                    [propget] HRESULT PackageSetId([out] [retval] HSTRING* value);
                    [propput] HRESULT PackageSetId([in] HSTRING value);
                    [propget] HRESULT PackageSetItemRuntimeDispositions([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition*>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageVolume)]
                [experimental]
                [uuid(6DBB8B13-92B8-5807-AC62-52C95BA6D143)]
                interface IPackageVolume : IInspectable
                {
                    [propget] HRESULT IsSystemVolume([out] [retval] boolean* value);
                    [propget] HRESULT MountPoint([out] [retval] HSTRING* value);
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageStorePath([out] [retval] HSTRING* value);
                    [propget] HRESULT SupportsHardLinks([out] [retval] boolean* value);
                    [propget] HRESULT IsFullTrustPackageSupported([out] [retval] boolean* value);
                    [propget] HRESULT IsAppxInstallSupported([out] [retval] boolean* value);
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolumeStatus** value);
                    HRESULT FixMe();
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageVolumeManager)]
                [experimental]
                [uuid(ED7DA902-7DA2-575F-BA62-F98403FE7B20)]
                interface IPackageVolumeManagerStatics : IInspectable
                {
                    HRESULT FindPackageVolumes([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.Management.Deployment.PackageVolume*>** result);
                    HRESULT FindPackageVolumeByPath([in] HSTRING path, [out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** result);
                    HRESULT FindPackageVolumeByMediaId([in] HSTRING mediaId, [out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** result);
                    HRESULT FindPackageVolumeByName([in] HSTRING name, [out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** result);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.PackageVolumeStatus)]
                [experimental]
                [uuid(C7317C19-83D1-591A-8368-221EDDF40782)]
                interface IPackageVolumeStatus : IInspectable
                {
                    [propget] HRESULT IsOK([out] [retval] boolean* value);
                    [propput] HRESULT IsOK([in] boolean value);
                    [propget] HRESULT IsOffline([out] [retval] boolean* value);
                    [propput] HRESULT IsOffline([in] boolean value);
                    [propget] HRESULT IsBroken([out] [retval] boolean* value);
                    [propput] HRESULT IsBroken([in] boolean value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.RegisterPackageOptions)]
                [experimental]
                [uuid(CE9258D3-11FF-5033-B68A-D55D7B5BC8F1)]
                interface IRegisterPackageOptions : IInspectable
                {
                    [propget] HRESULT AppDataVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT AppDataVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceAppShutdown([in] boolean value);
                    [propget] HRESULT ForceTargetAppShutdown([out] [retval] boolean* value);
                    [propput] HRESULT ForceTargetAppShutdown([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT DeferRegistrationWhenPackagesAreInUse([out] [retval] boolean* value);
                    [propput] HRESULT DeferRegistrationWhenPackagesAreInUse([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.RemovePackageOptions)]
                [experimental]
                [uuid(8C26418A-8E64-57AA-92A8-CE0EA6390D3F)]
                interface IRemovePackageOptions : IInspectable
                {
                    [propget] HRESULT PreserveApplicationData([out] [retval] boolean* value);
                    [propput] HRESULT PreserveApplicationData([in] boolean value);
                    [propget] HRESULT PreserveRoamableApplicationData([out] [retval] boolean* value);
                    [propput] HRESULT PreserveRoamableApplicationData([in] boolean value);
                    [propget] HRESULT RemoveForAllUsers([out] [retval] boolean* value);
                    [propput] HRESULT RemoveForAllUsers([in] boolean value);
                    [propget] HRESULT Priority([out] [retval] Microsoft.Windows.Management.Deployment.DeploymentPriority* value);
                    [propput] HRESULT Priority([in] Microsoft.Windows.Management.Deployment.DeploymentPriority value);
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Management.Deployment.StagePackageOptions)]
                [experimental]
                [uuid(9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E)]
                interface IStagePackageOptions : IInspectable
                {
                    [propget] HRESULT TargetVolume([out] [retval] Microsoft.Windows.Management.Deployment.PackageVolume** value);
                    [propput] HRESULT TargetVolume([in] Microsoft.Windows.Management.Deployment.PackageVolume* value);
                    [propget] HRESULT DependencyPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT OptionalPackageFamilyNames([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    [propget] HRESULT OptionalPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT RelatedPackageUris([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri*>** value);
                    [propget] HRESULT ExternalLocationUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ExternalLocationUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT StubPackageOption([out] [retval] Microsoft.Windows.Management.Deployment.StubPackageOption* value);
                    [propput] HRESULT StubPackageOption([in] Microsoft.Windows.Management.Deployment.StubPackageOption value);
                    [propget] HRESULT DeveloperMode([out] [retval] boolean* value);
                    [propput] HRESULT DeveloperMode([in] boolean value);
                    [propget] HRESULT ForceUpdateFromAnyVersion([out] [retval] boolean* value);
                    [propput] HRESULT ForceUpdateFromAnyVersion([in] boolean value);
                    [propget] HRESULT InstallAllResources([out] [retval] boolean* value);
                    [propput] HRESULT InstallAllResources([in] boolean value);
                    [propget] HRESULT RequiredContentGroupOnly([out] [retval] boolean* value);
                    [propput] HRESULT RequiredContentGroupOnly([in] boolean value);
                    [propget] HRESULT StageInPlace([out] [retval] boolean* value);
                    [propput] HRESULT StageInPlace([in] boolean value);
                    [propget] HRESULT AllowUnsigned([out] [retval] boolean* value);
                    [propput] HRESULT AllowUnsigned([in] boolean value);
                    [propget] HRESULT IsExpectedDigestsSupported([out] [retval] boolean* value);
                    [propget] HRESULT ExpectedDigests([out] [retval] Windows.Foundation.Collections.IMap<Windows.Foundation.Uri*, HSTRING>** value);
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AddPackageOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IAddPackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AddPackageSetOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IAddPackageSetOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass EnsureIsReadyOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IEnsureIsReadyOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FindPackageSetOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IFindPackageSetOptions;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageDeploymentManager
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManager;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass PackageDeploymentProgress
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageDeploymentProgress;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass PackageDeploymentResult
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageDeploymentResult;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageRuntimeManager
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageRuntimeManager;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSet
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageSet;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetItem
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageSetItem;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetItemRuntimeDisposition
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageSetManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageSetManager
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageSetManager;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageSetRuntimeDisposition
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageVolume
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageVolume;
                }

                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Management.Deployment.IPackageVolumeManagerStatics, Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [threading(both)]
                runtimeclass PackageVolumeManager
                {
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PackageVolumeStatus
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IPackageVolumeStatus;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RegisterPackageOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IRegisterPackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RemovePackageOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IRemovePackageOptions;
                }

                [activatable(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [contract(Microsoft.Windows.Management.Deployment.PackageDeploymentContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass StagePackageOptions
                {
                    [default] [experimental] interface Microsoft.Windows.Management.Deployment.IStagePackageOptions;
                }
            }
        }
    }
}
