//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Windows.Widgets.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            apicontract WidgetContract;

            typedef enum WidgetSize WidgetSize;
        }
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            namespace Providers
            {
                interface IWidgetActionInvokedArgs;

                interface IWidgetContext;

                interface IWidgetContextChangedArgs;

                interface IWidgetInfo;

                interface IWidgetManager;

                interface IWidgetManagerStatics;

                interface IWidgetProvider;

                interface IWidgetUpdateRequestOptions;

                interface IWidgetUpdateRequestOptionsFactory;

                interface IWidgetUpdateRequestOptionsStatics;

                runtimeclass WidgetActionInvokedArgs;

                runtimeclass WidgetContext;

                runtimeclass WidgetContextChangedArgs;

                runtimeclass WidgetInfo;

                runtimeclass WidgetManager;

                runtimeclass WidgetUpdateRequestOptions;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Widgets
        {
            namespace Providers
            {
                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetActionInvokedArgs)]
                [uuid(C593CC57-04B9-52CA-88AD-46FEA21EA340)]
                interface IWidgetActionInvokedArgs : IInspectable
                {
                    [propget] HRESULT WidgetContext([out] [retval] Microsoft.Windows.Widgets.Providers.WidgetContext** value);
                    [propget] HRESULT Verb([out] [retval] HSTRING* value);
                    [propget] HRESULT Data([out] [retval] HSTRING* value);
                    [propget] HRESULT CustomState([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetContext)]
                [uuid(903C518B-40BC-5BC6-88F7-AF9D81C0CDC1)]
                interface IWidgetContext : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT DefinitionId([out] [retval] HSTRING* value);
                    [propget] HRESULT Size([out] [retval] Microsoft.Windows.Widgets.WidgetSize* value);
                    [propget] HRESULT IsActive([out] [retval] boolean* value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetContextChangedArgs)]
                [uuid(2C226D54-2252-576B-A197-370B28D25C2F)]
                interface IWidgetContextChangedArgs : IInspectable
                {
                    [propget] HRESULT WidgetContext([out] [retval] Microsoft.Windows.Widgets.Providers.WidgetContext** value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetInfo)]
                [uuid(CEA11F42-A020-5DB5-89E2-B7DECE4AE5CB)]
                interface IWidgetInfo : IInspectable
                {
                    [propget] HRESULT WidgetContext([out] [retval] Microsoft.Windows.Widgets.Providers.WidgetContext** value);
                    [propget] HRESULT Template([out] [retval] HSTRING* value);
                    [propget] HRESULT Data([out] [retval] HSTRING* value);
                    [propget] HRESULT CustomState([out] [retval] HSTRING* value);
                    [propget] HRESULT LastUpdateTime([out] [retval] Windows.Foundation.DateTime* value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [uuid(71CB10C0-671E-48E3-B995-207940397123)]
                interface IWidgetManager : IInspectable
                {
                    HRESULT UpdateWidget([in] Microsoft.Windows.Widgets.Providers.WidgetUpdateRequestOptions* widgetUpdateRequestOptions);
                    HRESULT GetWidgetIds([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] HSTRING** result);
                    HRESULT GetWidgetInfo([in] HSTRING widgetId, [out] [retval] Microsoft.Windows.Widgets.Providers.WidgetInfo** result);
                    HRESULT GetWidgetInfos([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.Windows.Widgets.Providers.WidgetInfo*** result);
                    HRESULT DeleteWidget([in] HSTRING widgetId);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetManager)]
                [uuid(7F233B06-28E5-5E2B-8C04-A4FA747C28C7)]
                interface IWidgetManagerStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.Widgets.Providers.WidgetManager** result);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [uuid(5C5774CC-72A0-452D-B9ED-075C0DD25EED)]
                interface IWidgetProvider : IInspectable
                {
                    HRESULT CreateWidget([in] Microsoft.Windows.Widgets.Providers.WidgetContext* widgetContext);
                    HRESULT DeleteWidget([in] HSTRING widgetId, [in] HSTRING customState);
                    HRESULT OnActionInvoked([in] Microsoft.Windows.Widgets.Providers.WidgetActionInvokedArgs* actionInvokedArgs);
                    HRESULT OnWidgetContextChanged([in] Microsoft.Windows.Widgets.Providers.WidgetContextChangedArgs* contextChangedArgs);
                    HRESULT Activate([in] Microsoft.Windows.Widgets.Providers.WidgetContext* widgetContext);
                    HRESULT Deactivate([in] HSTRING widgetId);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetUpdateRequestOptions)]
                [uuid(B09CA8F7-7424-5687-BAAF-7DD6FA639672)]
                interface IWidgetUpdateRequestOptions : IInspectable
                {
                    [propget] HRESULT WidgetId([out] [retval] HSTRING* value);
                    [propget] HRESULT Template([out] [retval] HSTRING* value);
                    [propput] HRESULT Template([in] HSTRING value);
                    [propget] HRESULT Data([out] [retval] HSTRING* value);
                    [propput] HRESULT Data([in] HSTRING value);
                    [propget] HRESULT CustomState([out] [retval] HSTRING* value);
                    [propput] HRESULT CustomState([in] HSTRING value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetUpdateRequestOptions)]
                [uuid(E0E00AF8-1D10-57A8-9419-3F568E854DAA)]
                interface IWidgetUpdateRequestOptionsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] HSTRING widgetId, [out] [retval] Microsoft.Windows.Widgets.Providers.WidgetUpdateRequestOptions** value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [exclusiveto(Microsoft.Windows.Widgets.Providers.WidgetUpdateRequestOptions)]
                [uuid(4645B5E3-D332-5D11-82F0-3607E5DF6018)]
                interface IWidgetUpdateRequestOptionsStatics : IInspectable
                {
                    [propget] HRESULT UnsetValue([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass WidgetActionInvokedArgs
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetActionInvokedArgs;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass WidgetContext
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetContext;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass WidgetContextChangedArgs
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetContextChangedArgs;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass WidgetInfo
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetInfo;
                }

                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Widgets.Providers.IWidgetManagerStatics, Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [threading(both)]
                runtimeclass WidgetManager
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetManager;
                }

                [activatable(Microsoft.Windows.Widgets.Providers.IWidgetUpdateRequestOptionsFactory, Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [contract(Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.Widgets.Providers.IWidgetUpdateRequestOptionsStatics, Microsoft.Windows.Widgets.WidgetContract, 1.0)]
                [threading(both)]
                runtimeclass WidgetUpdateRequestOptions
                {
                    [default] interface Microsoft.Windows.Widgets.Providers.IWidgetUpdateRequestOptions;
                }
            }
        }
    }
}
