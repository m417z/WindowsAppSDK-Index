//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.UI.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Dispatching.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Graphics.idl";
import "Windows.UI.idl";
import "Windows.UI.Composition.idl";
import "Windows.UI.Core.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract WindowsAppSDKContract;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Compositor;

            interface ICompositionSupportsSystemBackdrop;

            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Dispatching
        {
            runtimeclass DispatcherQueue;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        typedef struct DisplayId DisplayId;

        typedef struct WindowId WindowId;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Content
        {
            typedef enum ContentCoordinateConversionBehavior ContentCoordinateConversionBehavior;

            typedef enum ContentDisplayOrientations ContentDisplayOrientations;

            typedef enum ContentSizePolicy ContentSizePolicy;

            typedef enum LayoutDirection LayoutDirection;

            interface IContentAppWindowBridgeStatics;

            interface IContentCoordinates;

            interface IContentCoordinatesFactory;

            interface IContentCoordinatesStatics;

            interface IContentExternalOutputLink;

            interface IContentExternalOutputLinkStatics;

            interface IContentIsland;

            interface IContentIslandAutomationProviderRequestedEventArgs;

            interface IContentIslandEventArgs;

            interface IContentIslandFactory;

            interface IContentIslandStatics;

            interface IContentNodeOwner;

            interface IContentNotificationDeferral;

            interface IContentSite;

            interface IContentSiteBridge;

            interface IContentSiteEventArgs;

            interface IContentSiteFactory;

            interface IContentSiteWindow;

            interface IContentWindow;

            interface ICoreWindowSiteBridge;

            interface ICoreWindowSiteBridgeStatics;

            interface IDesktopChildSiteBridge;

            interface IDesktopChildSiteBridgeStatics;

            interface IDesktopSiteBridge;

            interface IDesktopSiteBridgeFactory;

            interface IDesktopSiteBridgeStatics;

            interface IPopupWindowSiteBridge;

            interface ISystemVisualSiteBridge;

            interface ISystemVisualSiteBridgeStatics;

            runtimeclass ContentAppWindowBridge;

            runtimeclass ContentCoordinates;

            runtimeclass ContentExternalOutputLink;

            runtimeclass ContentIsland;

            runtimeclass ContentIslandAutomationProviderRequestedEventArgs;

            runtimeclass ContentIslandEventArgs;

            runtimeclass ContentIslandWindow;

            runtimeclass ContentNotificationDeferral;

            runtimeclass ContentSite;

            runtimeclass ContentSiteEventArgs;

            runtimeclass ContentSiteWindow;

            runtimeclass CoreWindowSiteBridge;

            runtimeclass CoreWindowTopLevelWindowBridge;

            runtimeclass DesktopChildSiteBridge;

            runtimeclass DesktopSiteBridge;

            runtimeclass PopupWindowSiteBridge;

            runtimeclass SystemVisualSiteBridge;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Content
        {
            declare
            {
                interface Windows.Foundation.IReference<Microsoft.UI.Content.LayoutDirection>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentSite*, Microsoft.UI.Content.ContentSiteEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.IContentWindow*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Content
        {
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            enum ContentCoordinateConversionBehavior
            {
                Default = 0,
                Floor   = 1,
                Round   = 2,
                Ceiling = 3
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [flags]
            enum ContentDisplayOrientations
            {
                None             = 0x0,
                Landscape        = 0x1,
                Portrait         = 0x2,
                LandscapeFlipped = 0x4,
                PortraitFlipped  = 0x8
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            enum ContentSizePolicy
            {
                None                        = 0,
                ResizeContentToParentWindow = 1,
                ResizeParentWindowToContent = 2
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            enum LayoutDirection
            {
                LeftToRight = 0,
                RightToLeft = 1
            };

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentAppWindowBridge)]
            [experimental]
            [uuid(84B9CD9C-E822-5F12-B21D-31A409B804F5)]
            interface IContentAppWindowBridgeStatics : IInspectable
            {
                HRESULT GetForWindowId([in] Microsoft.UI.WindowId childWindowId, [out] [retval] Microsoft.UI.Content.ContentAppWindowBridge** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentCoordinates)]
            [experimental]
            [uuid(70D5F25A-709D-53DC-9006-16C23B52AE50)]
            interface IContentCoordinates : IInspectable
            {
                [default_overload] [overload("ComputeLocalCoordinates")] HRESULT ComputeLocalCoordinatesWithPoint([in] Windows.Graphics.PointInt32 screenPositions, [out] [retval] Windows.Foundation.Point* result);
                [overload("ComputeLocalCoordinates")] HRESULT ComputeLocalCoordinatesWithPoints([in] UINT32 __screenPositionsSize, [in] [size_is(__screenPositionsSize)] Windows.Graphics.PointInt32* screenPositions, [out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Windows.Foundation.Point** result);
                [overload("ComputeLocalCoordinates")] HRESULT ComputeLocalCoordinatesWithRect([in] Windows.Graphics.RectInt32 screenPositions, [out] [retval] Windows.Foundation.Rect* result);
                [default_overload] [overload("ComputeScreenCoordinates")] HRESULT ComputeScreenCoordinatesWithPoint([in] Windows.Foundation.Point localPositions, [out] [retval] Windows.Graphics.PointInt32* result);
                [overload("ComputeScreenCoordinates")] HRESULT ComputeScreenCoordinatesWithPoints([in] UINT32 __localPositionsSize, [in] [size_is(__localPositionsSize)] Windows.Foundation.Point* localPositions, [out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Windows.Graphics.PointInt32** result);
                [overload("ComputeScreenCoordinates")] HRESULT ComputeScreenCoordinatesWithPointsAndBehavior([in] UINT32 __localPositionsSize, [in] [size_is(__localPositionsSize)] Windows.Foundation.Point* localPositions, [in] Microsoft.UI.Content.ContentCoordinateConversionBehavior conversionBehavior, [out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Windows.Graphics.PointInt32** result);
                [overload("ComputeScreenCoordinates")] HRESULT ComputeScreenCoordinatesWithRect([in] Windows.Foundation.Rect localPositions, [out] [retval] Windows.Graphics.RectInt32* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentCoordinates)]
            [experimental]
            [uuid(09BE7146-2CE3-59CB-8AAE-41F28D17C3E6)]
            interface IContentCoordinatesFactory : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentCoordinates)]
            [experimental]
            [uuid(41F2E61C-A343-5D06-BB3B-9B7E6D7D4330)]
            interface IContentCoordinatesStatics : IInspectable
            {
                HRESULT CreateForWindowId([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.UI.Content.ContentCoordinates** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentExternalOutputLink)]
            [experimental]
            [uuid(D9D6A0E6-1330-59ED-9C93-1729576E3DEF)]
            interface IContentExternalOutputLink : IInspectable
            {
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                [propget] HRESULT PlacementVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                [propget] HRESULT BackgroundColor([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentExternalOutputLink)]
            [experimental]
            [uuid(B758F401-833E-587D-B0CD-A3934EBA3721)]
            interface IContentExternalOutputLinkStatics : IInspectable
            {
                HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Content.ContentExternalOutputLink** result);
                HRESULT IsSupported([out] [retval] boolean* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentIsland)]
            [experimental]
            [uuid(4A45D1C8-D17A-5759-8F94-14D5E00B3399)]
            interface IContentIsland : IInspectable
            {
                [propget] HRESULT ActualSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                [propget] HRESULT AppData([out] [retval] IInspectable** value);
                [propput] HRESULT AppData([in] IInspectable* value);
                [propget] HRESULT CustomProperties([out] [retval] Windows.Foundation.Collections.IPropertySet** value);
                [propget] HRESULT Compositor([out] [retval] Microsoft.UI.Composition.Compositor** value);
                [propget] HRESULT Coordinates([out] [retval] Microsoft.UI.Content.ContentCoordinates** value);
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                [propget] HRESULT Id([out] [retval] UINT64* value);
                [propget] HRESULT IsConnected([out] [retval] boolean* value);
                [propget] HRESULT IsContentEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsContentEnabled([in] boolean value);
                [propget] HRESULT IsContentVisible([out] [retval] boolean* value);
                [propput] HRESULT IsContentVisible([in] boolean value);
                [propget] HRESULT IsHitTestAlways([out] [retval] boolean* value);
                [propput] HRESULT IsHitTestAlways([in] boolean value);
                [propget] HRESULT IsSiteEnabled([out] [retval] boolean* value);
                [propget] HRESULT IsSiteVisible([out] [retval] boolean* value);
                [propget] HRESULT LayoutDirection([out] [retval] Microsoft.UI.Content.LayoutDirection* value);
                [propget] HRESULT Orientation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propget] HRESULT RasterizationScale([out] [retval] FLOAT* value);
                [propget] HRESULT RequestedSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                [propput] HRESULT RequestedSize([in] Windows.Foundation.Numerics.Vector2 value);
                [propget] HRESULT Root([out] [retval] Microsoft.UI.Composition.Visual** value);
                [propput] HRESULT Root([in] Microsoft.UI.Composition.Visual* value);
                [propget] HRESULT Window([out] [retval] Microsoft.UI.Content.ContentIslandWindow** value);
                HRESULT CreateStateDeferral([out] [retval] Microsoft.UI.Content.ContentNotificationDeferral** result);
                [eventadd] HRESULT AutomationProviderRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AutomationProviderRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [eventadd] HRESULT Connected([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Connected([in] EventRegistrationToken token);
                [eventadd] HRESULT Disconnected([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Disconnected([in] EventRegistrationToken token);
                [eventadd] HRESULT StateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIsland*, Microsoft.UI.Content.ContentIslandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT StateChanged([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs)]
            [experimental]
            [uuid(9FE24BED-2B9C-5137-887F-403C94841824)]
            interface IContentIslandAutomationProviderRequestedEventArgs : IInspectable
            {
                [propget] HRESULT AutomationProvider([out] [retval] IInspectable** value);
                [propput] HRESULT AutomationProvider([in] IInspectable* value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentIslandEventArgs)]
            [experimental]
            [uuid(B737C291-F728-5E90-BDA4-A9E0EFE7C0B9)]
            interface IContentIslandEventArgs : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentIsland)]
            [experimental]
            [uuid(82383F52-E81A-5EC9-A954-BAC8A931BA7D)]
            interface IContentIslandFactory : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentIsland)]
            [experimental]
            [uuid(DC482863-EFB3-5AAD-9DF5-D78DD0C7FB72)]
            interface IContentIslandStatics : IInspectable
            {
                HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Content.ContentIsland** result);
                [overload("FindAllForCurrentThread")] HRESULT FindAllForCurrentThread([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Content.ContentIsland*** result);
                [overload("FindAllForCurrentThread")] HRESULT FindAllForCurrentThreadWithCompositor([in] Microsoft.UI.Composition.Compositor* compositor, [out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Content.ContentIsland*** result);
                HRESULT FindByVisual([in] Microsoft.UI.Composition.Visual* child, [out] [retval] Microsoft.UI.Content.ContentIsland** result);
                HRESULT GetFromId([in] UINT64 id, [out] [retval] Microsoft.UI.Content.ContentIsland** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [uuid(2251C304-449D-4456-B008-FE7163403D7E)]
            interface IContentNodeOwner : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentNotificationDeferral)]
            [experimental]
            [uuid(D6DAA59C-F356-5604-B07B-7EDB23F2EB22)]
            interface IContentNotificationDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentSite)]
            [experimental]
            [uuid(D5A3B69D-7117-56EB-9BA7-2531B3F9EBDF)]
            interface IContentSite : IInspectable
            {
                [propget] HRESULT ActualSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                [propput] HRESULT ActualSize([in] Windows.Foundation.Numerics.Vector2 value);
                [propget] HRESULT Compositor([out] [retval] Microsoft.UI.Composition.Compositor** value);
                [propget] HRESULT Coordinates([out] [retval] Microsoft.UI.Content.ContentCoordinates** value);
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                [propget] HRESULT IsConnected([out] [retval] boolean* value);
                [propget] HRESULT IsScaleAlreadyApplied([out] [retval] boolean* value);
                [propput] HRESULT IsScaleAlreadyApplied([in] boolean value);
                [propget] HRESULT IsSiteEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsSiteEnabled([in] boolean value);
                [propget] HRESULT IsSiteVisible([out] [retval] boolean* value);
                [propput] HRESULT IsSiteVisible([in] boolean value);
                [propget] HRESULT LayoutDirection([out] [retval] Microsoft.UI.Content.LayoutDirection* value);
                [propput] HRESULT LayoutDirection([in] Microsoft.UI.Content.LayoutDirection value);
                [propget] HRESULT OverrideScale([out] [retval] FLOAT* value);
                [propput] HRESULT OverrideScale([in] FLOAT value);
                [propget] HRESULT ParentScale([out] [retval] FLOAT* value);
                [propput] HRESULT ParentScale([in] FLOAT value);
                [propget] HRESULT PhysicalSize([out] [retval] Windows.Graphics.SizeInt32* value);
                [propput] HRESULT PhysicalSize([in] Windows.Graphics.SizeInt32 value);
                [propget] HRESULT RasterizationScale([out] [retval] FLOAT* value);
                [propget] HRESULT RequestedSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                [propget] HRESULT SiteVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                [propget] HRESULT Window([out] [retval] Microsoft.UI.Content.ContentSiteWindow** value);
                HRESULT SetContentNodeParent([in] Microsoft.UI.Content.IContentNodeOwner* value);
                HRESULT TryCreateStateDeferral([out] [retval] Microsoft.UI.Content.ContentNotificationDeferral** result);
                HRESULT TryGetAutomationProvider([out] IInspectable** provider, [out] [retval] boolean* result);
                [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentSite*, Microsoft.UI.Content.ContentSiteEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [eventadd] HRESULT RequestsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentSite*, Microsoft.UI.Content.ContentSiteEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT RequestsChanged([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [uuid(E9E4089C-88A7-52EF-BAED-611B1560530E)]
            interface IContentSiteBridge : IInspectable
                requires
                    Windows.Foundation.IClosable
            {
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                [propget] HRESULT IsConnected([out] [retval] boolean* value);
                [propget] HRESULT LayoutDirectionOverride([out] [retval] Windows.Foundation.IReference<Microsoft.UI.Content.LayoutDirection>** value);
                [propput] HRESULT LayoutDirectionOverride([in] Windows.Foundation.IReference<Microsoft.UI.Content.LayoutDirection>* value);
                [propget] HRESULT OverrideScale([out] [retval] FLOAT* value);
                [propput] HRESULT OverrideScale([in] FLOAT value);
                HRESULT Connect([in] Microsoft.UI.Content.ContentIsland* content);
                HRESULT TryCreatePopupSiteBridge([out] [retval] Microsoft.UI.Content.PopupWindowSiteBridge** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentSiteEventArgs)]
            [experimental]
            [uuid(7853C397-1667-596D-9B7D-DC6941DED8A4)]
            interface IContentSiteEventArgs : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentSite)]
            [experimental]
            [uuid(72FB98D5-B28A-57F1-91FA-24C014A342C1)]
            interface IContentSiteFactory : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.ContentSiteWindow)]
            [experimental]
            [uuid(F6FB8713-5370-56E4-A519-889FAC3A2470)]
            interface IContentSiteWindow : IInspectable
            {
                [propput] HRESULT CurrentOrientation([in] Microsoft.UI.Content.ContentDisplayOrientations value);
                [propput] HRESULT DisplayId([in] Microsoft.UI.DisplayId value);
                [propput] HRESULT DisplayScale([in] FLOAT value);
                [propput] HRESULT NativeOrientation([in] Microsoft.UI.Content.ContentDisplayOrientations value);
                [propput] HRESULT WindowId([in] Microsoft.UI.WindowId value);
                HRESULT NotifySettingsChanged();
                HRESULT NotifyStateChanged();
                HRESULT NotifyThemeChanged();
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [uuid(664F795B-18CA-5C78-AD1B-AF198A05CCFF)]
            interface IContentWindow : IInspectable
            {
                [propget] HRESULT CurrentOrientation([out] [retval] Microsoft.UI.Content.ContentDisplayOrientations* value);
                [propget] HRESULT DisplayId([out] [retval] Microsoft.UI.DisplayId* value);
                [propget] HRESULT DisplayScale([out] [retval] FLOAT* value);
                [propget] HRESULT NativeOrientation([out] [retval] Microsoft.UI.Content.ContentDisplayOrientations* value);
                [propget] HRESULT WindowId([out] [retval] Microsoft.UI.WindowId* value);
                [eventadd] HRESULT SettingsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.IContentWindow*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SettingsChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT StateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.IContentWindow*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT StateChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT ThemeChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.IContentWindow*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ThemeChanged([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.CoreWindowSiteBridge)]
            [experimental]
            [uuid(9ADB8288-EB40-5F4C-B08E-78077A2EAE27)]
            interface ICoreWindowSiteBridge : IInspectable
            {
                [propget] HRESULT WindowBridge([out] [retval] Microsoft.UI.Content.CoreWindowTopLevelWindowBridge** value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.CoreWindowSiteBridge)]
            [experimental]
            [uuid(FBC56793-11F2-5754-AD70-30E82C07FA35)]
            interface ICoreWindowSiteBridgeStatics : IInspectable
            {
                HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Windows.UI.Core.CoreWindow* coreWindow, [out] [retval] Microsoft.UI.Content.CoreWindowSiteBridge** result);
                HRESULT IsSupported([out] [retval] boolean* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.DesktopChildSiteBridge)]
            [experimental]
            [uuid(967BBBC1-AAB4-56B6-866D-96D2B09DD5EE)]
            interface IDesktopChildSiteBridge : IInspectable
            {
                [propget] HRESULT ResizePolicy([out] [retval] Microsoft.UI.Content.ContentSizePolicy* value);
                [propput] HRESULT ResizePolicy([in] Microsoft.UI.Content.ContentSizePolicy value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.DesktopChildSiteBridge)]
            [experimental]
            [uuid(AB6B82DE-6A47-5DE3-A860-613C8DB679AB)]
            interface IDesktopChildSiteBridgeStatics : IInspectable
            {
                HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Microsoft.UI.WindowId parentWindowId, [out] [retval] Microsoft.UI.Content.DesktopChildSiteBridge** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.DesktopSiteBridge)]
            [experimental]
            [uuid(4258422D-2FCF-5F11-8D28-B558A1FBED51)]
            interface IDesktopSiteBridge : IInspectable
            {
                [propget] HRESULT InputEnabled([out] [retval] boolean* value);
                [propput] HRESULT InputEnabled([in] boolean value);
                [propget] HRESULT WindowBridge([out] [retval] Microsoft.UI.Content.ContentAppWindowBridge** value);
                [propget] HRESULT WindowId([out] [retval] Microsoft.UI.WindowId* value);
                HRESULT GetInputEnabledToRoot([out] [retval] boolean* result);
                HRESULT GetVisibleToRoot([out] [retval] boolean* result);
                HRESULT Hide();
                HRESULT MoveAndResize([in] Windows.Graphics.RectInt32 rect);
                [overload("Show")] HRESULT Show();
                [overload("Show")] HRESULT ShowWithActivate([in] boolean activate);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.DesktopSiteBridge)]
            [experimental]
            [uuid(D94EE1FF-3AF1-54D0-9311-652B29C57C5B)]
            interface IDesktopSiteBridgeFactory : IInspectable
            {
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.DesktopSiteBridge)]
            [experimental]
            [uuid(E0B38DAF-9CD4-50C5-83EE-C76E3CF34EBA)]
            interface IDesktopSiteBridgeStatics : IInspectable
            {
                HRESULT IsSupported([out] [retval] boolean* result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.PopupWindowSiteBridge)]
            [experimental]
            [uuid(044597A2-E6EE-5DAB-ABE0-1923EBE34C2E)]
            interface IPopupWindowSiteBridge : IInspectable
            {
                [propget] HRESULT Anchored([out] [retval] boolean* value);
                [propput] HRESULT Anchored([in] boolean value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.SystemVisualSiteBridge)]
            [experimental]
            [uuid(34EA3723-5CF8-5393-82C4-A04754A0A212)]
            interface ISystemVisualSiteBridge : IInspectable
            {
                [propget] HRESULT Site([out] [retval] Microsoft.UI.Content.ContentSite** value);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [exclusiveto(Microsoft.UI.Content.SystemVisualSiteBridge)]
            [experimental]
            [uuid(F37DDB4C-8B68-5EB6-BDEE-31256973F42D)]
            interface ISystemVisualSiteBridgeStatics : IInspectable
            {
                HRESULT Create([in] Microsoft.UI.Composition.Compositor* localCompositor, [in] Windows.UI.Composition.ContainerVisual* hostVisual, [in] Microsoft.UI.WindowId parentForInputWindowId, [out] [retval] Microsoft.UI.Content.SystemVisualSiteBridge** result);
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IContentAppWindowBridgeStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass ContentAppWindowBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentWindow;
                [experimental] interface Microsoft.UI.Content.IContentNodeOwner;
            }

            [composable(Microsoft.UI.Content.IContentCoordinatesFactory, public, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IContentCoordinatesStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass ContentCoordinates
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentCoordinates;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IContentExternalOutputLinkStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass ContentExternalOutputLink
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentExternalOutputLink;
                interface Windows.Foundation.IClosable;
            }

            [composable(Microsoft.UI.Content.IContentIslandFactory, public, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IContentIslandStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass ContentIsland
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentIsland;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentIslandAutomationProviderRequestedEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentIslandEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentIslandEventArgs;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentIslandWindow
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentWindow;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentNotificationDeferral
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentNotificationDeferral;
            }

            [composable(Microsoft.UI.Content.IContentSiteFactory, public, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ContentSite
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentSite;
                interface Windows.Foundation.IClosable;
                interface Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentSiteEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentSiteEventArgs;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContentSiteWindow
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentSiteWindow;
                [experimental] interface Microsoft.UI.Content.IContentWindow;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.ICoreWindowSiteBridgeStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass CoreWindowSiteBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.ICoreWindowSiteBridge;
                [experimental] interface Microsoft.UI.Content.IContentSiteBridge;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass CoreWindowTopLevelWindowBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.IContentWindow;
                [experimental] interface Microsoft.UI.Content.IContentNodeOwner;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IDesktopChildSiteBridgeStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass DesktopChildSiteBridge : Microsoft.UI.Content.DesktopSiteBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.IDesktopChildSiteBridge;
            }

            [composable(Microsoft.UI.Content.IDesktopSiteBridgeFactory, public, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.IDesktopSiteBridgeStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass DesktopSiteBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.IDesktopSiteBridge;
                [experimental] interface Microsoft.UI.Content.IContentSiteBridge;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass PopupWindowSiteBridge : Microsoft.UI.Content.DesktopSiteBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.IPopupWindowSiteBridge;
            }

            [contract(Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Content.ISystemVisualSiteBridgeStatics, Microsoft.Foundation.WindowsAppSDKContract, 1.2)]
            [threading(both)]
            runtimeclass SystemVisualSiteBridge
            {
                [default] [experimental] interface Microsoft.UI.Content.ISystemVisualSiteBridge;
                [experimental] interface Microsoft.UI.Content.IContentSiteBridge;
                interface Windows.Foundation.IClosable;
            }
        }
    }
}
