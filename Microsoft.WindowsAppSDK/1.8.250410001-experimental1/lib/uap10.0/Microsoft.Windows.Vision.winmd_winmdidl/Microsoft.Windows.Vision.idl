//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Graphics.Imaging.idl";
import "Microsoft.Windows.AI.idl";
import "Microsoft.Windows.Workloads.idl";
import "Windows.Graphics.idl";

// Forward Declare
namespace Microsoft
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass ImageBuffer;
        }
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace AI
        {
            runtimeclass AIFeatureReadyResult;

            typedef enum AIFeatureReadyState AIFeatureReadyState;
        }
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Workloads
        {
            typedef enum WorkloadPriority WorkloadPriority;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct Point Point;
    }
}
namespace Windows
{
    namespace Graphics
    {
        typedef struct SizeInt32 SizeInt32;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Vision
        {
            apicontract TextRecognitionContract;

            typedef enum DetectedLineStyle DetectedLineStyle;

            typedef enum OrientationDetectionOptions OrientationDetectionOptions;

            typedef struct BoundingBox BoundingBox;

            typedef struct RecognizedLineStyle RecognizedLineStyle;

            interface IRecognizedLine;

            interface IRecognizedText;

            interface IRecognizedWord;

            interface ITextRecognizer;

            interface ITextRecognizerOptions;

            interface ITextRecognizerStatics;

            runtimeclass RecognizedLine;

            runtimeclass RecognizedText;

            runtimeclass RecognizedWord;

            runtimeclass TextRecognizer;

            runtimeclass TextRecognizerOptions;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace Vision
        {
            declare
            {
                interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.Vision.RecognizedText*>;

                interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.Vision.TextRecognizer*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Vision
        {
            [contractversion(1.0)]
            apicontract TextRecognitionContract
            {
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            enum DetectedLineStyle
            {
                Handwritten = 0,
                Other       = 1
            };

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            enum OrientationDetectionOptions
            {
                None              = 0,
                DetectOrientation = 1
            };

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            struct BoundingBox
            {
                Windows.Foundation.Point BottomLeft;
                Windows.Foundation.Point BottomRight;
                Windows.Foundation.Point TopLeft;
                Windows.Foundation.Point TopRight;
            };

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            struct RecognizedLineStyle
            {
                FLOAT Confidence;
                Microsoft.Windows.Vision.DetectedLineStyle Name;
            };

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.RecognizedLine)]
            [experimental]
            [uuid(D2BC3061-C751-52C2-902A-72B2FE9BF1E3)]
            interface IRecognizedLine : IInspectable
            {
                [propget] HRESULT Text([out] [retval] HSTRING* value);
                [propget] HRESULT BoundingBox([out] [retval] Microsoft.Windows.Vision.BoundingBox* value);
                [propget] HRESULT Words([out] UINT32* __valueSize, [out] [retval] [size_is(, *__valueSize)] Microsoft.Windows.Vision.RecognizedWord*** value);
                [propget] HRESULT Style([out] [retval] Microsoft.Windows.Vision.RecognizedLineStyle* value);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.RecognizedText)]
            [experimental]
            [uuid(35241760-DC1D-564E-B3D8-C49342121373)]
            interface IRecognizedText : IInspectable
            {
                [propget] HRESULT Lines([out] UINT32* __valueSize, [out] [retval] [size_is(, *__valueSize)] Microsoft.Windows.Vision.RecognizedLine*** value);
                [propget] HRESULT ImageAngle([out] [retval] FLOAT* value);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.RecognizedWord)]
            [experimental]
            [uuid(A71B8929-C0C2-56AA-825A-556F5FAF44D5)]
            interface IRecognizedWord : IInspectable
            {
                [propget] HRESULT Text([out] [retval] HSTRING* value);
                [propget] HRESULT BoundingBox([out] [retval] Microsoft.Windows.Vision.BoundingBox* value);
                [propget] HRESULT Confidence([out] [retval] FLOAT* value);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.TextRecognizer)]
            [experimental]
            [uuid(B6E2DED7-BC15-521E-9A3A-D83C0DCF5CA0)]
            interface ITextRecognizer : IInspectable
            {
                [overload("RecognizeTextFromImageAsync")] HRESULT RecognizeTextFromImageAsync([in] Microsoft.Graphics.Imaging.ImageBuffer* imageBuffer, [in] Microsoft.Windows.Vision.TextRecognizerOptions* options, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Vision.RecognizedText*>** operation);
                [overload("RecognizeTextFromImage")] HRESULT RecognizeTextFromImage([in] Microsoft.Graphics.Imaging.ImageBuffer* imageBuffer, [in] Microsoft.Windows.Vision.TextRecognizerOptions* options, [out] [retval] Microsoft.Windows.Vision.RecognizedText** result);
                [overload("RecognizeTextFromImageAsync")] HRESULT RecognizeTextFromImageAsync2([in] Microsoft.Graphics.Imaging.ImageBuffer* imageBuffer, [in] Microsoft.Windows.Vision.TextRecognizerOptions* options, [in] Microsoft.Windows.Workloads.WorkloadPriority priority, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Vision.RecognizedText*>** operation);
                [overload("RecognizeTextFromImage")] HRESULT RecognizeTextFromImage2([in] Microsoft.Graphics.Imaging.ImageBuffer* imageBuffer, [in] Microsoft.Windows.Vision.TextRecognizerOptions* options, [in] Microsoft.Windows.Workloads.WorkloadPriority priority, [out] [retval] Microsoft.Windows.Vision.RecognizedText** result);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.TextRecognizerOptions)]
            [experimental]
            [uuid(99C1DEC2-98E8-5D4D-B0A4-8549AD78FFDE)]
            interface ITextRecognizerOptions : IInspectable
            {
                [propget] HRESULT OrientationDetection([out] [retval] Microsoft.Windows.Vision.OrientationDetectionOptions* value);
                [propput] HRESULT OrientationDetection([in] Microsoft.Windows.Vision.OrientationDetectionOptions value);
                [propget] HRESULT MaxAnalysisSize([out] [retval] Windows.Graphics.SizeInt32* value);
                [propput] HRESULT MaxAnalysisSize([in] Windows.Graphics.SizeInt32 value);
                [propget] HRESULT MaxLineCount([out] [retval] UINT32* value);
                [propput] HRESULT MaxLineCount([in] UINT32 value);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [exclusiveto(Microsoft.Windows.Vision.TextRecognizer)]
            [experimental]
            [uuid(D350964B-9C23-5365-AFDB-3C6A9F89BF8F)]
            interface ITextRecognizerStatics : IInspectable
            {
                HRESULT GetReadyState([out] [retval] Microsoft.Windows.AI.AIFeatureReadyState* result);
                HRESULT EnsureReadyAsync([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.AIFeatureReadyResult*, DOUBLE>** operation);
                HRESULT CreateAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Vision.TextRecognizer*>** operation);
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass RecognizedLine
            {
                [default] [experimental] interface Microsoft.Windows.Vision.IRecognizedLine;
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass RecognizedText
            {
                [default] [experimental] interface Microsoft.Windows.Vision.IRecognizedText;
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass RecognizedWord
            {
                [default] [experimental] interface Microsoft.Windows.Vision.IRecognizedWord;
            }

            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.Windows.Vision.ITextRecognizerStatics, Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [threading(both)]
            runtimeclass TextRecognizer
            {
                [default] [experimental] interface Microsoft.Windows.Vision.ITextRecognizer;
                interface Windows.Foundation.IClosable;
            }

            [activatable(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [contract(Microsoft.Windows.Vision.TextRecognitionContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass TextRecognizerOptions
            {
                [default] [experimental] interface Microsoft.Windows.Vision.ITextRecognizerOptions;
            }
        }
    }
}
