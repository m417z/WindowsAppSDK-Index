//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        typedef struct WindowId WindowId;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace Storage
        {
            namespace Pickers
            {
                apicontract StoragePickersContract;

                typedef enum PickerLocationId PickerLocationId;

                typedef enum PickerViewMode PickerViewMode;

                interface IFileOpenPicker;

                interface IFileOpenPickerFactory;

                interface IFileSavePicker;

                interface IFileSavePickerFactory;

                interface IFolderPicker;

                interface IFolderPickerFactory;

                interface IPickFileResult;

                interface IPickFolderResult;

                runtimeclass FileOpenPicker;

                runtimeclass FileSavePicker;

                runtimeclass FolderPicker;

                runtimeclass PickFileResult;

                runtimeclass PickFolderResult;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace Storage
        {
            namespace Pickers
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.Storage.Pickers.PickFileResult*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.Storage.Pickers.PickFileResult*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Storage.Pickers.PickFileResult*>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.Storage.Pickers.PickFileResult*>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.Storage.Pickers.PickFolderResult*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Storage.Pickers.PickFileResult*>*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace Storage
        {
            namespace Pickers
            {
                [contractversion(1.8)]
                apicontract StoragePickersContract
                {
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                enum PickerLocationId
                {
                    DocumentsLibrary = 0,
                    ComputerFolder   = 1,
                    Desktop          = 2,
                    Downloads        = 3,
                    MusicLibrary     = 5,
                    PicturesLibrary  = 6,
                    VideosLibrary    = 7,
                    Objects3D        = 8,
                    Unspecified      = 9
                };

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                enum PickerViewMode
                {
                    List      = 0,
                    Thumbnail = 1
                };

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FileOpenPicker)]
                [uuid(9D00F175-C783-51BD-8C93-FB63695D3ABC)]
                interface IFileOpenPicker : IInspectable
                {
                    [propget] HRESULT ViewMode([out] [retval] Microsoft.Windows.Storage.Pickers.PickerViewMode* value);
                    [propput] HRESULT ViewMode([in] Microsoft.Windows.Storage.Pickers.PickerViewMode value);
                    [propget] HRESULT SuggestedStartLocation([out] [retval] Microsoft.Windows.Storage.Pickers.PickerLocationId* value);
                    [propput] HRESULT SuggestedStartLocation([in] Microsoft.Windows.Storage.Pickers.PickerLocationId value);
                    [propget] HRESULT CommitButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT CommitButtonText([in] HSTRING value);
                    [propget] HRESULT FileTypeFilter([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    HRESULT PickSingleFileAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Storage.Pickers.PickFileResult*>** operation);
                    HRESULT PickMultipleFilesAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Microsoft.Windows.Storage.Pickers.PickFileResult*>*>** operation);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FileOpenPicker)]
                [uuid(315E86D7-D7A2-5D81-B379-7AF78207B1AF)]
                interface IFileOpenPickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.Windows.Storage.Pickers.FileOpenPicker** value);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FileSavePicker)]
                [uuid(79F1F4DF-741B-59B2-AA06-FE9AC817B7DD)]
                interface IFileSavePicker : IInspectable
                {
                    [propget] HRESULT SuggestedStartLocation([out] [retval] Microsoft.Windows.Storage.Pickers.PickerLocationId* value);
                    [propput] HRESULT SuggestedStartLocation([in] Microsoft.Windows.Storage.Pickers.PickerLocationId value);
                    [propget] HRESULT CommitButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT CommitButtonText([in] HSTRING value);
                    [propget] HRESULT FileTypeChoices([out] [retval] Windows.Foundation.Collections.IMap<HSTRING, Windows.Foundation.Collections.IVector<HSTRING>*>** value);
                    [propget] HRESULT DefaultFileExtension([out] [retval] HSTRING* value);
                    [propput] HRESULT DefaultFileExtension([in] HSTRING value);
                    [propget] HRESULT SuggestedFileName([out] [retval] HSTRING* value);
                    [propput] HRESULT SuggestedFileName([in] HSTRING value);
                    [propget] HRESULT SuggestedFolder([out] [retval] HSTRING* value);
                    [propput] HRESULT SuggestedFolder([in] HSTRING value);
                    HRESULT PickSaveFileAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Storage.Pickers.PickFileResult*>** operation);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FileSavePicker)]
                [uuid(2E256696-30B6-5A05-A8F5-C752DB6DD268)]
                interface IFileSavePickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.Windows.Storage.Pickers.FileSavePicker** value);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FolderPicker)]
                [uuid(3EF0D1CA-97C6-5873-8EA2-02C450174290)]
                interface IFolderPicker : IInspectable
                {
                    [propget] HRESULT ViewMode([out] [retval] Microsoft.Windows.Storage.Pickers.PickerViewMode* value);
                    [propput] HRESULT ViewMode([in] Microsoft.Windows.Storage.Pickers.PickerViewMode value);
                    [propget] HRESULT SuggestedStartLocation([out] [retval] Microsoft.Windows.Storage.Pickers.PickerLocationId* value);
                    [propput] HRESULT SuggestedStartLocation([in] Microsoft.Windows.Storage.Pickers.PickerLocationId value);
                    [propget] HRESULT CommitButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT CommitButtonText([in] HSTRING value);
                    HRESULT PickSingleFolderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.Storage.Pickers.PickFolderResult*>** operation);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.FolderPicker)]
                [uuid(E1550D89-B389-5886-8395-022B1588D6A8)]
                interface IFolderPickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.WindowId windowId, [out] [retval] Microsoft.Windows.Storage.Pickers.FolderPicker** value);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.PickFileResult)]
                [uuid(E6F2E3D6-7BB0-5D81-9E7D-6FD35A1F25AB)]
                interface IPickFileResult : IInspectable
                {
                    [propget] HRESULT Path([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [exclusiveto(Microsoft.Windows.Storage.Pickers.PickFolderResult)]
                [uuid(6F7FD316-FE29-59D1-9343-C49CF5CDE680)]
                interface IPickFolderResult : IInspectable
                {
                    [propget] HRESULT Path([out] [retval] HSTRING* value);
                }

                [activatable(Microsoft.Windows.Storage.Pickers.IFileOpenPickerFactory, Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FileOpenPicker
                {
                    [default] interface Microsoft.Windows.Storage.Pickers.IFileOpenPicker;
                }

                [activatable(Microsoft.Windows.Storage.Pickers.IFileSavePickerFactory, Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FileSavePicker
                {
                    [default] interface Microsoft.Windows.Storage.Pickers.IFileSavePicker;
                }

                [activatable(Microsoft.Windows.Storage.Pickers.IFolderPickerFactory, Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FolderPicker
                {
                    [default] interface Microsoft.Windows.Storage.Pickers.IFolderPicker;
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [marshaling_behavior(agile)]
                runtimeclass PickFileResult
                {
                    [default] interface Microsoft.Windows.Storage.Pickers.IPickFileResult;
                }

                [contract(Microsoft.Windows.Storage.Pickers.StoragePickersContract, 1.8)]
                [marshaling_behavior(agile)]
                runtimeclass PickFolderResult
                {
                    [default] interface Microsoft.Windows.Storage.Pickers.IPickFolderResult;
                }
            }
        }
    }
}
