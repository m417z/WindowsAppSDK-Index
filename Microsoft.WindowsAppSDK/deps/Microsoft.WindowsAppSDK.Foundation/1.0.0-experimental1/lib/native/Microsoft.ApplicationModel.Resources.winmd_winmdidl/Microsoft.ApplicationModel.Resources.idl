//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Uri;
    }
}
namespace Microsoft
{
    namespace ApplicationModel
    {
        namespace Resources
        {
            apicontract MrtContract;

            typedef enum ResourceCandidateKind ResourceCandidateKind;

            interface IKnownResourceQualifierNameStatics;

            interface IResourceCandidate;

            interface IResourceCandidateFactory;

            interface IResourceContext;

            interface IResourceLoader;

            interface IResourceLoaderFactory;

            interface IResourceLoaderStatics;

            interface IResourceManager;

            interface IResourceManagerFactory;

            interface IResourceMap;

            interface IResourceNotFoundEventArgs;

            runtimeclass KnownResourceQualifierName;

            runtimeclass ResourceCandidate;

            runtimeclass ResourceContext;

            runtimeclass ResourceLoader;

            runtimeclass ResourceManager;

            runtimeclass ResourceMap;

            runtimeclass ResourceNotFoundEventArgs;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace ApplicationModel
    {
        namespace Resources
        {
            declare
            {
                interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.ApplicationModel.Resources.ResourceCandidate*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.ApplicationModel.Resources.ResourceManager*, Microsoft.ApplicationModel.Resources.ResourceNotFoundEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace ApplicationModel
    {
        namespace Resources
        {
            [contractversion(1.0)]
            apicontract MrtContract
            {
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            enum ResourceCandidateKind
            {
                Unknown      = 0,
                String       = 1,
                FilePath     = 2,
                EmbeddedData = 3
            };

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.KnownResourceQualifierName)]
            [uuid(FCD57EE9-0F7B-55BD-9807-70E84F2BDE18)]
            interface IKnownResourceQualifierNameStatics : IInspectable
            {
                [propget] HRESULT Contrast([out] [retval] HSTRING* value);
                [propget] HRESULT Custom([out] [retval] HSTRING* value);
                [propget] HRESULT DeviceFamily([out] [retval] HSTRING* value);
                [propget] HRESULT HomeRegion([out] [retval] HSTRING* value);
                [propget] HRESULT Language([out] [retval] HSTRING* value);
                [propget] HRESULT LayoutDirection([out] [retval] HSTRING* value);
                [propget] HRESULT Scale([out] [retval] HSTRING* value);
                [propget] HRESULT TargetSize([out] [retval] HSTRING* value);
                [propget] HRESULT Theme([out] [retval] HSTRING* value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceCandidate)]
            [uuid(F08C9641-B6D8-5BDD-AB03-EDE2EE139318)]
            interface IResourceCandidate : IInspectable
            {
                [propget] HRESULT ValueAsString([out] [retval] HSTRING* value);
                [propget] HRESULT ValueAsBytes([out] UINT32* __valueSize, [out] [retval] [size_is(, *__valueSize)] BYTE** value);
                [propget] HRESULT Kind([out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidateKind* value);
                [propget] HRESULT QualifierValues([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, HSTRING>** value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceCandidate)]
            [uuid(81937268-9824-5276-A635-414F0DD8A216)]
            interface IResourceCandidateFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.ApplicationModel.Resources.ResourceCandidateKind kind, [in] HSTRING data, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** value);
                HRESULT CreateInstance2([in] UINT32 __dataSize, [in] [size_is(__dataSize)] BYTE* data, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceContext)]
            [uuid(AB3F858D-6BE3-5FEF-9A31-2B00173C7CD8)]
            interface IResourceContext : IInspectable
            {
                [propget] HRESULT QualifierValues([out] [retval] Windows.Foundation.Collections.IMap<HSTRING, HSTRING>** value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceLoader)]
            [uuid(05CA38AF-FA56-56C0-B2D8-1D15ACF0DFD1)]
            interface IResourceLoader : IInspectable
            {
                HRESULT GetString([in] HSTRING resourceId, [out] [retval] HSTRING* result);
                HRESULT GetStringForUri([in] Windows.Foundation.Uri* resourceUri, [out] [retval] HSTRING* result);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceLoader)]
            [uuid(4F761042-1B7C-534A-9E1E-05D84D04B41A)]
            interface IResourceLoaderFactory : IInspectable
            {
                HRESULT CreateInstance([in] HSTRING fileName, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceLoader** value);
                HRESULT CreateInstance2([in] HSTRING fileName, [in] HSTRING resourceMap, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceLoader** value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceLoader)]
            [uuid(4231722D-CBD0-5A6A-99CA-EE35C49933A7)]
            interface IResourceLoaderStatics : IInspectable
            {
                HRESULT GetDefaultResourceFilePath([out] [retval] HSTRING* result);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceManager)]
            [uuid(6306FA46-6D4F-509C-B18B-600BB2E2633D)]
            interface IResourceManager : IInspectable
            {
                [propget] HRESULT MainResourceMap([out] [retval] Microsoft.ApplicationModel.Resources.ResourceMap** value);
                HRESULT CreateResourceContext([out] [retval] Microsoft.ApplicationModel.Resources.ResourceContext** result);
                [eventadd] HRESULT ResourceNotFound([in] Windows.Foundation.TypedEventHandler<Microsoft.ApplicationModel.Resources.ResourceManager*, Microsoft.ApplicationModel.Resources.ResourceNotFoundEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ResourceNotFound([in] EventRegistrationToken token);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceManager)]
            [uuid(9B4254F6-C5C0-50AE-96CF-AB6AE0BCEBF2)]
            interface IResourceManagerFactory : IInspectable
            {
                HRESULT CreateInstance([in] HSTRING fileName, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceManager** value);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceMap)]
            [uuid(A4EDD118-98B1-5CD7-B85E-79DABF85BB11)]
            interface IResourceMap : IInspectable
            {
                [propget] HRESULT ResourceCount([out] [retval] UINT32* value);
                HRESULT GetSubtree([in] HSTRING reference, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceMap** result);
                [overload("GetValue")] HRESULT GetValue([in] HSTRING resource, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** result);
                [overload("GetValue")] HRESULT GetValueWithContext([in] HSTRING resource, [in] Microsoft.ApplicationModel.Resources.ResourceContext* context, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** result);
                [overload("GetValueByIndex")] HRESULT GetValueByIndex([in] UINT32 index, [out] [retval] Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.ApplicationModel.Resources.ResourceCandidate*>** result);
                [overload("GetValueByIndex")] HRESULT GetValueByIndexWithContext([in] UINT32 index, [in] Microsoft.ApplicationModel.Resources.ResourceContext* context, [out] [retval] Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.ApplicationModel.Resources.ResourceCandidate*>** result);
                [overload("TryGetValue")] HRESULT TryGetValue([in] HSTRING resource, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** result);
                [overload("TryGetValue")] HRESULT TryGetValueWithContext([in] HSTRING resource, [in] Microsoft.ApplicationModel.Resources.ResourceContext* context, [out] [retval] Microsoft.ApplicationModel.Resources.ResourceCandidate** result);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [exclusiveto(Microsoft.ApplicationModel.Resources.ResourceNotFoundEventArgs)]
            [uuid(61C80C70-A7E9-5DCD-9359-44361A3A11F8)]
            interface IResourceNotFoundEventArgs : IInspectable
            {
                [propget] HRESULT Context([out] [retval] Microsoft.ApplicationModel.Resources.ResourceContext** value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                HRESULT SetResolvedCandidate([in] Microsoft.ApplicationModel.Resources.ResourceCandidate* candidate);
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.ApplicationModel.Resources.IKnownResourceQualifierNameStatics, Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [threading(both)]
            runtimeclass KnownResourceQualifierName
            {
            }

            [activatable(Microsoft.ApplicationModel.Resources.IResourceCandidateFactory, Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ResourceCandidate
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceCandidate;
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass ResourceContext
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceContext;
            }

            [activatable(Microsoft.ApplicationModel.Resources.IResourceLoaderFactory, Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [activatable(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.ApplicationModel.Resources.IResourceLoaderStatics, Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [threading(both)]
            runtimeclass ResourceLoader
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceLoader;
            }

            [activatable(Microsoft.ApplicationModel.Resources.IResourceManagerFactory, Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [activatable(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ResourceManager
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceManager;
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass ResourceMap
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceMap;
            }

            [contract(Microsoft.ApplicationModel.Resources.MrtContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass ResourceNotFoundEventArgs
            {
                [default] interface Microsoft.ApplicationModel.Resources.IResourceNotFoundEventArgs;
            }
        }
    }
}
