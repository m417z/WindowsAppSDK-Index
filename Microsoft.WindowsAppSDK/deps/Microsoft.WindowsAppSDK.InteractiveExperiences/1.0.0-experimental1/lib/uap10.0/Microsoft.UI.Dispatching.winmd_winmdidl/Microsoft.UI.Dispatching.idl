//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedContract;
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Deferral;

        interface IAsyncAction;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Dispatching
        {
            typedef enum DispatcherQueuePriority DispatcherQueuePriority;

            delegate DispatcherQueueHandler;

            interface IDispatcherQueue;

            interface IDispatcherQueue2;

            interface IDispatcherQueueController;

            interface IDispatcherQueueControllerStatics;

            interface IDispatcherQueueShutdownStartingEventArgs;

            interface IDispatcherQueueStatics;

            interface IDispatcherQueueTimer;

            runtimeclass DispatcherQueue;

            runtimeclass DispatcherQueueController;

            runtimeclass DispatcherQueueShutdownStartingEventArgs;

            runtimeclass DispatcherQueueTimer;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Dispatching
        {
            declare
            {
                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue*, Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueueTimer*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Dispatching
        {
            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            enum DispatcherQueuePriority
            {
                Low    = -10,
                Normal = 0,
                High   = 10
            };

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [uuid(2E0872A9-4E29-5F14-B688-FB96D5F9D5F8)]
            delegate
                HRESULT DispatcherQueueHandler();

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueue)]
            [uuid(F6EBF8FA-BE1C-5BF6-A467-73DA28738AE8)]
            interface IDispatcherQueue : IInspectable
            {
                HRESULT CreateTimer([out] [retval] Microsoft.UI.Dispatching.DispatcherQueueTimer** result);
                [overload("TryEnqueue")] HRESULT TryEnqueue([in] Microsoft.UI.Dispatching.DispatcherQueueHandler* callback, [out] [retval] boolean* result);
                [overload("TryEnqueue")] HRESULT TryEnqueueWithPriority([in] Microsoft.UI.Dispatching.DispatcherQueuePriority priority, [in] Microsoft.UI.Dispatching.DispatcherQueueHandler* callback, [out] [retval] boolean* result);
                [eventadd] HRESULT ShutdownStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue*, Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ShutdownStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT ShutdownCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ShutdownCompleted([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueue)]
            [uuid(0CF48751-F1AC-59B8-BA52-6CE7A1444D6F)]
            interface IDispatcherQueue2 : IInspectable
            {
                [propget] HRESULT HasThreadAccess([out] [retval] boolean* value);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueueController)]
            [uuid(BCE8178D-2183-584C-9E5B-F9366F6AE484)]
            interface IDispatcherQueueController : IInspectable
            {
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** value);
                HRESULT ShutdownQueueAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueueController)]
            [uuid(F18D6145-722B-593D-BCF2-A61E713F0037)]
            interface IDispatcherQueueControllerStatics : IInspectable
            {
                HRESULT CreateOnDedicatedThread([out] [retval] Microsoft.UI.Dispatching.DispatcherQueueController** result);
                HRESULT CreateOnCurrentThread([out] [retval] Microsoft.UI.Dispatching.DispatcherQueueController** result);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs)]
            [uuid(32519BE5-072B-5660-A70E-8835C9B8157D)]
            interface IDispatcherQueueShutdownStartingEventArgs : IInspectable
            {
                HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** result);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueue)]
            [uuid(CD3382EA-A455-5124-B63A-CA40D34CA23C)]
            interface IDispatcherQueueStatics : IInspectable
            {
                HRESULT GetForCurrentThread([out] [retval] Microsoft.UI.Dispatching.DispatcherQueue** result);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [exclusiveto(Microsoft.UI.Dispatching.DispatcherQueueTimer)]
            [uuid(AD4D63FD-88FE-541F-AC11-BF2DC1ED2CE5)]
            interface IDispatcherQueueTimer : IInspectable
            {
                [propget] HRESULT Interval([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Interval([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT IsRunning([out] [retval] boolean* value);
                [propget] HRESULT IsRepeating([out] [retval] boolean* value);
                [propput] HRESULT IsRepeating([in] boolean value);
                HRESULT Start();
                HRESULT Stop();
                [eventadd] HRESULT Tick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueueTimer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Tick([in] EventRegistrationToken token);
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Dispatching.IDispatcherQueueStatics, Microsoft.Foundation.LiftedContract, 1.0)]
            [threading(both)]
            runtimeclass DispatcherQueue
            {
                [default] interface Microsoft.UI.Dispatching.IDispatcherQueue;
                [contract(Microsoft.Foundation.LiftedContract, 1.0)] interface Microsoft.UI.Dispatching.IDispatcherQueue2;
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics, Microsoft.Foundation.LiftedContract, 1.0)]
            [threading(both)]
            runtimeclass DispatcherQueueController
            {
                [default] interface Microsoft.UI.Dispatching.IDispatcherQueueController;
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DispatcherQueueShutdownStartingEventArgs
            {
                [default] interface Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs;
            }

            [contract(Microsoft.Foundation.LiftedContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DispatcherQueueTimer
            {
                [default] interface Microsoft.UI.Dispatching.IDispatcherQueueTimer;
            }
        }
    }
}
