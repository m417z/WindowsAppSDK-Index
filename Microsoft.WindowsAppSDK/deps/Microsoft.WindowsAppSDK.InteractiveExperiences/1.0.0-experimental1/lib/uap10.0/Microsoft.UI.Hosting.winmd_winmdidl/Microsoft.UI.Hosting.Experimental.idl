//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.UI.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Composition.Experimental.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Windows.Graphics.idl";
import "Windows.UI.idl";
import "Windows.UI.Core.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedExperimentalContract;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Compositor;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                runtimeclass ExpCompositionContent;

                interface IExpContentTopLevelHost;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpFocusNavigationRequest;

                runtimeclass ExpFocusNavigationResult;

                runtimeclass ExpNavigateFocusRequestedEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        typedef struct WindowId WindowId;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;
    }
}
namespace Windows
{
    namespace Graphics
    {
        typedef struct RectInt32 RectInt32;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass CoreWindow;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                interface IExpContentBridge;

                interface IExpContentBridgeWithPopups;

                interface IExpCoreWindowBridge;

                interface IExpCoreWindowBridgeStatics;

                interface IExpDesktopWindowBridge;

                interface IExpDesktopWindowBridgeStatics;

                interface IExpDesktopWindowTopLevelHostStatics;

                interface IExpPopupWindowBridge;

                interface IExpPopupWindowBridgeStatics;

                interface IExpSystemVisualBridge;

                interface IExpSystemVisualBridgeStatics;

                runtimeclass ExpCoreWindowBridge;

                runtimeclass ExpCoreWindowTopLevelHost;

                runtimeclass ExpDesktopWindowBridge;

                runtimeclass ExpDesktopWindowTopLevelHost;

                runtimeclass ExpPopupWindowBridge;

                runtimeclass ExpSystemVisualBridge;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(F27A1057-ECA2-5532-A327-0FB72F491EBB)]
                interface IExpContentBridge : IInspectable
                    requires
                        Windows.Foundation.IClosable
                {
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Composition.Experimental.ExpCompositionContent** value);
                    HRESULT Connect([in] Microsoft.UI.Composition.Experimental.ExpCompositionContent* content);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(AE6DCA01-4B09-5587-899E-1910EAAEA899)]
                interface IExpContentBridgeWithPopups : IInspectable
                {
                    HRESULT CreatePopup([out] [retval] Microsoft.UI.Hosting.Experimental.ExpPopupWindowBridge** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge)]
                [uuid(86EFC254-88C8-5550-A358-9655E2DC4A0B)]
                interface IExpCoreWindowBridge : IInspectable
                {
                    [propget] HRESULT TopLevelHost([out] [retval] Microsoft.UI.Hosting.Experimental.ExpCoreWindowTopLevelHost** value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge)]
                [uuid(B888061B-D5DC-58A8-9E44-C881EA3AAECB)]
                interface IExpCoreWindowBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Windows.UI.Core.CoreWindow* coreWindow, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge)]
                [uuid(3AE0ABDC-B824-5983-B14B-C2C325D8DCBC)]
                interface IExpDesktopWindowBridge : IInspectable
                {
                    [propget] HRESULT ChildWindowId([out] [retval] Microsoft.UI.WindowId* value);
                    [propget] HRESULT FillTopLevelWindow([out] [retval] boolean* value);
                    [propput] HRESULT FillTopLevelWindow([in] boolean value);
                    [propget] HRESULT TopLevelHost([out] [retval] Microsoft.UI.Hosting.Experimental.ExpDesktopWindowTopLevelHost** value);
                    HRESULT NavigateFocus([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest* request, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationResult** result);
                    HRESULT PreTranslateKeyboardMessage([in] UINT64 windowHandle, [in] UINT32 keyboardMessage, [in] UINT32 virtualKey, [in] UINT64 keyInfo, [out] [retval] boolean* result);
                    HRESULT SetOverrideScaleFactor([in] FLOAT value);
                    [eventadd] HRESULT TakeFocusRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TakeFocusRequested([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge)]
                [uuid(4DD9D544-3DDC-56B9-9682-6FBDCAE9B464)]
                interface IExpDesktopWindowBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Microsoft.UI.WindowId parentWindowId, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpDesktopWindowTopLevelHost)]
                [uuid(8147E68F-978E-5A3C-A3FA-6FE571292324)]
                interface IExpDesktopWindowTopLevelHostStatics : IInspectable
                {
                    HRESULT GetForWindowId([in] Microsoft.UI.WindowId childWindowId, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpDesktopWindowTopLevelHost** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpPopupWindowBridge)]
                [uuid(99CEBFFC-C265-5D7F-B3CF-35894A75303D)]
                interface IExpPopupWindowBridge : IInspectable
                {
                    [propget] HRESULT PopupWindowId([out] [retval] Microsoft.UI.WindowId* value);
                    HRESULT Hide();
                    HRESULT MoveAndResize([in] Windows.Graphics.RectInt32 rect);
                    HRESULT Show();
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpPopupWindowBridge)]
                [uuid(9DFC7ECC-C7C1-5952-8AAD-77B822F7D4C7)]
                interface IExpPopupWindowBridgeStatics : IInspectable
                {
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge)]
                [uuid(AF3AABAA-F231-5682-BF72-3BE27E60F6D1)]
                interface IExpSystemVisualBridge : IInspectable
                {
                    [propget] HRESULT BridgeVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                    [propget] HRESULT BackgroundColor([out] [retval] Windows.UI.Color* value);
                    [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge)]
                [uuid(29469AC9-FE18-540C-B0A8-060BF7618D65)]
                interface IExpSystemVisualBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpCoreWindowBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridge;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridge;
                    interface Windows.Foundation.IClosable;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridgeWithPopups;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpCoreWindowTopLevelHost
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpContentTopLevelHost;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpDesktopWindowBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridge;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridge;
                    interface Windows.Foundation.IClosable;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridgeWithPopups;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpDesktopWindowTopLevelHostStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpDesktopWindowTopLevelHost
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpContentTopLevelHost;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpPopupWindowBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpPopupWindowBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpPopupWindowBridge;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridge;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpSystemVisualBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridge;
                    interface Windows.Foundation.IClosable;
                }
            }
        }
    }
}
