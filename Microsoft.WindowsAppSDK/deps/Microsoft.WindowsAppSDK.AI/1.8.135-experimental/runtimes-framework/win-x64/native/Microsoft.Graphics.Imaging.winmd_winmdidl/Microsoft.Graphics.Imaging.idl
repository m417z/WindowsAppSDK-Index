//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Storage.Streams.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;
        }
    }
}
namespace Microsoft
{
    namespace Graphics
    {
        namespace Imaging
        {
            apicontract ImageBufferContract;

            typedef enum ImageBufferPixelFormat ImageBufferPixelFormat;

            interface IImageBuffer;

            interface IImageBufferStatics;

            runtimeclass ImageBuffer;
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace Graphics
    {
        namespace Imaging
        {
            [contractversion(1.0)]
            apicontract ImageBufferContract
            {
            }

            [contract(Microsoft.Graphics.Imaging.ImageBufferContract, 1.0)]
            enum ImageBufferPixelFormat
            {
                Rgb8  = 137224,
                Rgba8 = 30,
                Argb8 = 2498570,
                Bgra8 = 87,
                Gray8 = 62
            };

            [contract(Microsoft.Graphics.Imaging.ImageBufferContract, 1.0)]
            [exclusiveto(Microsoft.Graphics.Imaging.ImageBuffer)]
            [uuid(3BAABD0B-1854-51F1-BD2A-74C87858F461)]
            interface IImageBuffer : IInspectable
            {
                [propget] HRESULT Buffer([out] [retval] Windows.Storage.Streams.IBuffer** value);
                [propget] HRESULT PixelFormat([out] [retval] Microsoft.Graphics.Imaging.ImageBufferPixelFormat* value);
                [propget] HRESULT PixelHeight([out] [retval] INT32* value);
                [propget] HRESULT PixelWidth([out] [retval] INT32* value);
                [propget] HRESULT RowStride([out] [retval] INT32* value);
                HRESULT CopyToByteArray([in] UINT32 __valuesSize, [out] [size_is(__valuesSize)] BYTE* values);
                HRESULT CopyToSoftwareBitmap([out] [retval] Windows.Graphics.Imaging.SoftwareBitmap** result);
            }

            [contract(Microsoft.Graphics.Imaging.ImageBufferContract, 1.0)]
            [exclusiveto(Microsoft.Graphics.Imaging.ImageBuffer)]
            [uuid(35B17BD3-F346-529F-8C0F-3BF96C56EB13)]
            interface IImageBufferStatics : IInspectable
            {
                HRESULT CreateForBuffer([in] Windows.Storage.Streams.IBuffer* buffer, [in] Microsoft.Graphics.Imaging.ImageBufferPixelFormat pixelFormat, [in] INT32 width, [in] INT32 height, [in] INT32 rowStride, [out] [retval] Microsoft.Graphics.Imaging.ImageBuffer** result);
                HRESULT CreateForSoftwareBitmap([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [out] [retval] Microsoft.Graphics.Imaging.ImageBuffer** result);
            }

            [contract(Microsoft.Graphics.Imaging.ImageBufferContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.Graphics.Imaging.IImageBufferStatics, Microsoft.Graphics.Imaging.ImageBufferContract, 1.0)]
            [threading(both)]
            runtimeclass ImageBuffer
            {
                [default] interface Microsoft.Graphics.Imaging.IImageBuffer;
                interface Windows.Foundation.IClosable;
            }
        }
    }
}
