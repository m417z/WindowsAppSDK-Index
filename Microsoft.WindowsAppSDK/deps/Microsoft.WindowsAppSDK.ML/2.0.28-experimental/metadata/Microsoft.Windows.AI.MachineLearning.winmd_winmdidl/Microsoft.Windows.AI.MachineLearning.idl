//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.idl";

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        runtimeclass PackageId;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        runtimeclass Uri;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace AI
        {
            namespace MachineLearning
            {
                apicontract MachineLearningContract;

                typedef enum CatalogModelStatus CatalogModelStatus;

                typedef enum ExecutionProviderCertification ExecutionProviderCertification;

                typedef enum ExecutionProviderReadyResultState ExecutionProviderReadyResultState;

                typedef enum ExecutionProviderReadyState ExecutionProviderReadyState;

                interface ICatalogModelInfo;

                interface ICatalogModelInstance;

                interface ICatalogModelInstanceResult;

                interface ICatalogModelSource;

                interface ICatalogModelSourceStatics;

                interface IExecutionProvider;

                interface IExecutionProviderCatalog;

                interface IExecutionProviderCatalogStatics;

                interface IExecutionProviderReadyResult;

                interface IWinMLModelCatalog;

                interface IWinMLModelCatalogFactory;

                runtimeclass CatalogModelInfo;

                runtimeclass CatalogModelInstance;

                runtimeclass CatalogModelInstanceResult;

                runtimeclass CatalogModelSource;

                runtimeclass ExecutionProvider;

                runtimeclass ExecutionProviderCatalog;

                runtimeclass ExecutionProviderReadyResult;

                runtimeclass WinMLModelCatalog;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace AI
        {
            namespace MachineLearning
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>;

                    interface Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.MachineLearning.CatalogModelInstanceResult*, DOUBLE>;

                    interface Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult*, DOUBLE>;

                    interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>*, DOUBLE>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace AI
        {
            namespace MachineLearning
            {
                [contractversion(2.0)]
                apicontract MachineLearningContract
                {
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                enum CatalogModelStatus
                {
                    Available   = 0,
                    Downloading = 1,
                    Unavailable = 2
                };

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                enum ExecutionProviderCertification
                {
                    Unknown     = 0,
                    Certified   = 1,
                    Uncertified = 2
                };

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                enum ExecutionProviderReadyResultState
                {
                    InProgress = 0,
                    Success    = 1,
                    Failure    = 2
                };

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                enum ExecutionProviderReadyState
                {
                    Ready      = 0,
                    NotReady   = 1,
                    NotPresent = 2
                };

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.CatalogModelInfo)]
                [experimental]
                [uuid(5B7363DE-DC85-5601-A15B-E868E5E2C8AC)]
                interface ICatalogModelInfo : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT Alias([out] [retval] HSTRING* value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propget] HRESULT Description([out] [retval] HSTRING* value);
                    [propget] HRESULT SourceId([out] [retval] HSTRING* value);
                    [propget] HRESULT Uri([out] [retval] Windows.Foundation.Uri** value);
                    [propget] HRESULT ExecutionProviders([out] [retval] Windows.Foundation.Collections.IVectorView<HSTRING>** value);
                    [propget] HRESULT Size([out] [retval] UINT64* value);
                    [propget] HRESULT Revision([out] [retval] HSTRING* value);
                    [propget] HRESULT License([out] [retval] HSTRING* value);
                    [propget] HRESULT LicenseUri([out] [retval] HSTRING* value);
                    [propget] HRESULT LicenseText([out] [retval] HSTRING* value);
                    HRESULT GetStatus([out] [retval] Microsoft.Windows.AI.MachineLearning.CatalogModelStatus* result);
                    [overload("GetInstance")] HRESULT GetInstance([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.MachineLearning.CatalogModelInstanceResult*, DOUBLE>** operation);
                    [overload("GetInstance")] HRESULT GetInstance2([in] Windows.Foundation.Collections.IMap<HSTRING, HSTRING>* additionalHeaders, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.MachineLearning.CatalogModelInstanceResult*, DOUBLE>** operation);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.CatalogModelInstance)]
                [experimental]
                [uuid(9E920521-5E06-5C30-B0C2-8AF313EFB756)]
                interface ICatalogModelInstance : IInspectable
                {
                    [propget] HRESULT ModelPaths([out] [retval] Windows.Foundation.Collections.IVectorView<HSTRING>** value);
                    [propget] HRESULT ModelInfo([out] [retval] Microsoft.Windows.AI.MachineLearning.CatalogModelInfo** value);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.CatalogModelInstanceResult)]
                [experimental]
                [uuid(16A0D92F-E3E2-53E3-B7D0-DC697B9EBB17)]
                interface ICatalogModelInstanceResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.AI.MachineLearning.CatalogModelStatus* value);
                    [propget] HRESULT Instance([out] [retval] Microsoft.Windows.AI.MachineLearning.CatalogModelInstance** value);
                    [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
                    [propget] HRESULT DiagnosticText([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.CatalogModelSource)]
                [experimental]
                [uuid(54505C50-3A7F-5101-9A4B-2784956D3151)]
                interface ICatalogModelSource : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propget] HRESULT Description([out] [retval] HSTRING* value);
                    [propget] HRESULT Uri([out] [retval] Windows.Foundation.Uri** value);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.CatalogModelSource)]
                [experimental]
                [uuid(40DBC8DA-A3B2-5724-830D-15454A90AA91)]
                interface ICatalogModelSourceStatics : IInspectable
                {
                    HRESULT CreateFromUri([in] Windows.Foundation.Uri* location, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>** operation);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.ExecutionProvider)]
                [uuid(98356468-CF23-504F-B29C-9347781925FF)]
                interface IExecutionProvider : IInspectable
                {
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT LibraryPath([out] [retval] HSTRING* value);
                    [propget] HRESULT PackageId([out] [retval] Windows.ApplicationModel.PackageId** value);
                    [propget] HRESULT ReadyState([out] [retval] Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyState* value);
                    [propget] HRESULT Certification([out] [retval] Microsoft.Windows.AI.MachineLearning.ExecutionProviderCertification* value);
                    HRESULT EnsureReadyAsync([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult*, DOUBLE>** operation);
                    HRESULT TryRegister([out] [retval] boolean* result);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog)]
                [uuid(AA9BFE14-2222-5921-8002-4D2A205EA03C)]
                interface IExecutionProviderCatalog : IInspectable
                {
                    HRESULT FindAllProviders([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.Windows.AI.MachineLearning.ExecutionProvider*** result);
                    HRESULT EnsureAndRegisterCertifiedAsync([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>*, DOUBLE>** operation);
                    HRESULT RegisterCertifiedAsync([out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.ExecutionProvider*>*, DOUBLE>** operation);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog)]
                [uuid(550DEF98-2611-5433-AFB8-43673B610848)]
                interface IExecutionProviderCatalogStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog** result);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult)]
                [uuid(91C1724D-93C7-5284-ADBE-BA2BD7BE7C79)]
                interface IExecutionProviderReadyResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResultState* value);
                    [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
                    [propget] HRESULT DiagnosticText([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.WinMLModelCatalog)]
                [experimental]
                [uuid(FAA853DD-F26E-5A59-A551-9E40CB22BCAE)]
                interface IWinMLModelCatalog : IInspectable
                {
                    [propget] HRESULT Sources([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.CatalogModelSource*>** value);
                    [propget] HRESULT ExecutionProviders([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
                    HRESULT GetAvailableModel([in] HSTRING aliasOrId, [out] [retval] Microsoft.Windows.AI.MachineLearning.CatalogModelInfo** result);
                    HRESULT GetAvailableModels([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>** result);
                    HRESULT FindModel([in] HSTRING aliasOrId, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>** operation);
                    HRESULT FindAllModels([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Microsoft.Windows.AI.MachineLearning.CatalogModelInfo*>*>** operation);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [exclusiveto(Microsoft.Windows.AI.MachineLearning.WinMLModelCatalog)]
                [experimental]
                [uuid(E5FE45A6-0290-5BFE-A5BB-BB6DBD0AC34D)]
                interface IWinMLModelCatalogFactory : IInspectable
                {
                    HRESULT CreateInstance([in] UINT32 __sourcesSize, [in] [size_is(__sourcesSize)] Microsoft.Windows.AI.MachineLearning.CatalogModelSource** sources, [out] [retval] Microsoft.Windows.AI.MachineLearning.WinMLModelCatalog** value);
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass CatalogModelInfo
                {
                    [default] [experimental] interface Microsoft.Windows.AI.MachineLearning.ICatalogModelInfo;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass CatalogModelInstance
                {
                    [default] [experimental] interface Microsoft.Windows.AI.MachineLearning.ICatalogModelInstance;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass CatalogModelInstanceResult
                {
                    [default] [experimental] interface Microsoft.Windows.AI.MachineLearning.ICatalogModelInstanceResult;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.AI.MachineLearning.ICatalogModelSourceStatics, Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [threading(both)]
                runtimeclass CatalogModelSource
                {
                    [default] [experimental] interface Microsoft.Windows.AI.MachineLearning.ICatalogModelSource;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExecutionProvider
                {
                    [default] interface Microsoft.Windows.AI.MachineLearning.IExecutionProvider;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalogStatics, Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [threading(both)]
                runtimeclass ExecutionProviderCatalog
                {
                    [default] interface Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalog;
                }

                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExecutionProviderReadyResult
                {
                    [default] interface Microsoft.Windows.AI.MachineLearning.IExecutionProviderReadyResult;
                }

                [activatable(Microsoft.Windows.AI.MachineLearning.IWinMLModelCatalogFactory, Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [contract(Microsoft.Windows.AI.MachineLearning.MachineLearningContract, 2.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass WinMLModelCatalog
                {
                    [default] [experimental] interface Microsoft.Windows.AI.MachineLearning.IWinMLModelCatalog;
                }
            }
        }
    }
}
