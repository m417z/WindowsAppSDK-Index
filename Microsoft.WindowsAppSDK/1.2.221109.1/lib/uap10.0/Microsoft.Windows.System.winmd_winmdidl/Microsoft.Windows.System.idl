//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            apicontract EnvironmentManagerContract;

            interface IEnvironmentManager;

            interface IEnvironmentManagerStatics;

            runtimeclass EnvironmentManager;
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            [contractversion(1.0)]
            apicontract EnvironmentManagerContract
            {
            }

            [contract(Microsoft.Windows.System.EnvironmentManagerContract, 1.0)]
            [exclusiveto(Microsoft.Windows.System.EnvironmentManager)]
            [uuid(D1B239BB-7013-5176-B02A-63477410D986)]
            interface IEnvironmentManager : IInspectable
            {
                HRESULT GetEnvironmentVariables([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, HSTRING>** result);
                HRESULT GetEnvironmentVariable([in] HSTRING name, [out] [retval] HSTRING* result);
                HRESULT SetEnvironmentVariable([in] HSTRING name, [in] HSTRING value);
                HRESULT AppendToPath([in] HSTRING path);
                HRESULT RemoveFromPath([in] HSTRING path);
                HRESULT AddExecutableFileExtension([in] HSTRING pathExt);
                HRESULT RemoveExecutableFileExtension([in] HSTRING pathExt);
            }

            [contract(Microsoft.Windows.System.EnvironmentManagerContract, 1.0)]
            [exclusiveto(Microsoft.Windows.System.EnvironmentManager)]
            [uuid(407B1522-6156-5398-93FD-D6411C35E7B1)]
            interface IEnvironmentManagerStatics : IInspectable
            {
                HRESULT GetForProcess([out] [retval] Microsoft.Windows.System.EnvironmentManager** result);
                HRESULT GetForUser([out] [retval] Microsoft.Windows.System.EnvironmentManager** result);
                HRESULT GetForMachine([out] [retval] Microsoft.Windows.System.EnvironmentManager** result);
                [propget] HRESULT IsSupported([out] [retval] boolean* value);
            }

            [contract(Microsoft.Windows.System.EnvironmentManagerContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.Windows.System.IEnvironmentManagerStatics, Microsoft.Windows.System.EnvironmentManagerContract, 1.0)]
            [threading(both)]
            runtimeclass EnvironmentManager
            {
                [default] interface Microsoft.Windows.System.IEnvironmentManager;
            }
        }
    }
}
