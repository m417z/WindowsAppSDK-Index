//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct TimeSpan TimeSpan;
    }
}
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Power
            {
                apicontract PowerNotificationsContract;

                typedef enum BatteryStatus BatteryStatus;

                typedef enum DisplayStatus DisplayStatus;

                typedef enum EffectivePowerMode EffectivePowerMode;

                typedef enum EnergySaverStatus EnergySaverStatus;

                typedef enum PowerSourceKind PowerSourceKind;

                typedef enum PowerSupplyStatus PowerSupplyStatus;

                typedef enum SystemSuspendStatus SystemSuspendStatus;

                typedef enum UserPresenceStatus UserPresenceStatus;

                interface IPowerManagerStatics;

                interface IPowerManagerStatics2;

                runtimeclass PowerManager;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Power
            {
                declare
                {
                    interface Windows.Foundation.IAsyncOperation<Microsoft.Windows.System.Power.EffectivePowerMode>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace Windows
    {
        namespace System
        {
            namespace Power
            {
                [contractversion(2.0)]
                apicontract PowerNotificationsContract
                {
                }

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum BatteryStatus
                {
                    NotPresent  = 0,
                    Discharging = 1,
                    Idle        = 2,
                    Charging    = 3
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum DisplayStatus
                {
                    Off    = 0,
                    On     = 1,
                    Dimmed = 2
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum EffectivePowerMode
                {
                    BatterySaver    = 0,
                    BetterBattery   = 1,
                    Balanced        = 2,
                    HighPerformance = 3,
                    MaxPerformance  = 4,
                    GameMode        = 5,
                    MixedReality    = 6
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum EnergySaverStatus
                {
                    Uninitialized = 0,
                    Disabled      = 1,
                    Off           = 2,
                    On            = 3
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum PowerSourceKind
                {
                    AC = 0,
                    DC = 1
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum PowerSupplyStatus
                {
                    NotPresent = 0,
                    Inadequate = 1,
                    Adequate   = 2
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum SystemSuspendStatus
                {
                    Uninitialized = 0,
                    Entering      = 1,
                    AutoResume    = 2,
                    ManualResume  = 3
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                enum UserPresenceStatus
                {
                    Present = 0,
                    Absent  = 1
                };

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                [exclusiveto(Microsoft.Windows.System.Power.PowerManager)]
                [uuid(FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4)]
                interface IPowerManagerStatics : IInspectable
                {
                    [propget] HRESULT EnergySaverStatus([out] [retval] Microsoft.Windows.System.Power.EnergySaverStatus* value);
                    [eventadd] HRESULT EnergySaverStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT EnergySaverStatusChanged([in] EventRegistrationToken token);
                    [propget] HRESULT BatteryStatus([out] [retval] Microsoft.Windows.System.Power.BatteryStatus* value);
                    [eventadd] HRESULT BatteryStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BatteryStatusChanged([in] EventRegistrationToken token);
                    [propget] HRESULT PowerSupplyStatus([out] [retval] Microsoft.Windows.System.Power.PowerSupplyStatus* value);
                    [eventadd] HRESULT PowerSupplyStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PowerSupplyStatusChanged([in] EventRegistrationToken token);
                    [propget] HRESULT RemainingChargePercent([out] [retval] INT32* value);
                    [eventadd] HRESULT RemainingChargePercentChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RemainingChargePercentChanged([in] EventRegistrationToken token);
                    [propget] HRESULT RemainingDischargeTime([out] [retval] Windows.Foundation.TimeSpan* value);
                    [eventadd] HRESULT RemainingDischargeTimeChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RemainingDischargeTimeChanged([in] EventRegistrationToken token);
                    [propget] HRESULT PowerSourceKind([out] [retval] Microsoft.Windows.System.Power.PowerSourceKind* value);
                    [eventadd] HRESULT PowerSourceKindChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PowerSourceKindChanged([in] EventRegistrationToken token);
                    [propget] HRESULT DisplayStatus([out] [retval] Microsoft.Windows.System.Power.DisplayStatus* value);
                    [eventadd] HRESULT DisplayStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DisplayStatusChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SystemIdleStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SystemIdleStatusChanged([in] EventRegistrationToken token);
                    [propget] HRESULT EffectivePowerMode([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.Windows.System.Power.EffectivePowerMode>** value);
                    [eventadd] HRESULT EffectivePowerModeChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT EffectivePowerModeChanged([in] EventRegistrationToken token);
                    [propget] HRESULT UserPresenceStatus([out] [retval] Microsoft.Windows.System.Power.UserPresenceStatus* value);
                    [eventadd] HRESULT UserPresenceStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT UserPresenceStatusChanged([in] EventRegistrationToken token);
                    [propget] HRESULT SystemSuspendStatus([out] [retval] Microsoft.Windows.System.Power.SystemSuspendStatus* value);
                    [eventadd] HRESULT SystemSuspendStatusChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SystemSuspendStatusChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 2.0)]
                [exclusiveto(Microsoft.Windows.System.Power.PowerManager)]
                [uuid(61F3CC25-65B4-5DEF-9C9B-990CEF3B0833)]
                interface IPowerManagerStatics2 : IInspectable
                {
                    [propget] HRESULT EffectivePowerMode2([out] [retval] Microsoft.Windows.System.Power.EffectivePowerMode* value);
                }

                [contract(Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.Windows.System.Power.IPowerManagerStatics, Microsoft.Windows.System.Power.PowerNotificationsContract, 1.0)]
                [static(Microsoft.Windows.System.Power.IPowerManagerStatics2, Microsoft.Windows.System.Power.PowerNotificationsContract, 2.0)]
                [threading(both)]
                runtimeclass PowerManager
                {
                }
            }
        }
    }
}
